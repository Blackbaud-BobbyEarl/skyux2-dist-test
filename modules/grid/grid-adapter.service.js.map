{"version":3,"sources":["../../../.srctemp/modules/grid/grid-adapter.service.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,UAAU,EACX,MAAM,eAAA,CAAgB;AAIvB,IAAM,0BAAA,GAA6B,0BAAA,CAA2B;AAC9D,IAAM,2BAAA,GAA8B,yBAAA,CAA0B;AAG9D;IAAA;IA4CA,CAAC;IA1CQ,qDAAqB,GAA5B,UACE,cAA8B,EAC9B,YAAmD;QACnD,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,UAAC,EAA8B;gBAA3B,cAAM;YACtC,OAAA,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,0BAA0B,CAAC;QAAhD,CAAgD,CACjD,CAAC;QAEF,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,UAAC,EAA8B;gBAA3B,cAAM;YACzC,OAAA,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,0BAA0B,CAAC;QAAnD,CAAmD,CACpD,CAAC;QAEF,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,UAAC,EAAmC;gBAA9B,iBAAS;YAC3C,IAAI,SAAS,GAAa,EAAE,CAAC;YAC7B,IAAI,KAAK,GAAG,SAAS,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YACjD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACtC,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAClB,IAAI,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;gBACvC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACrB,CAAC;YACD,YAAY,CAAC,SAAS,CAAC,CAAC;QAE1B,CAAC,CAAC,CAAC;QAEH,cAAc,CAAC,UAAU,CAAC,kBAAkB,EAAE;YAC5C,KAAK,EAAE,UAAC,EAAe,EAAE,SAAsB,EAAE,MAAmB;gBAClE,MAAM,CAAC,MAAM,KAAK,SAAS,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC;YAC9E,CAAC;YACD,OAAO,EAAE,UACP,EAAe,EACf,MAAmB,EACnB,MAAmB,EACnB,OAAoB;gBAClB,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC;YAC5F,CAAC;SACJ,CAAC,CAAC;IACL,CAAC;IAOH,4BAAC;AAAD,CA5CA,AA4CC;;AANM,gCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,oCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"grid-adapter.service.js","sourceRoot":"","sourcesContent":["import {\n  Injectable\n} from '@angular/core';\n\nimport { DragulaService } from 'ng2-dragula/ng2-dragula';\n\nconst GRID_HEADER_DRAGGING_CLASS = 'sky-grid-header-dragging';\nconst GRID_HEADER_LOCKED_SELECTOR = '.sky-grid-header-locked';\n\n\nexport class SkyGridAdapterService {\n\n  public initializeDragAndDrop(\n    dragulaService: DragulaService,\n    dropCallback: (newColumnIds: Array<string>) => void) {\n    dragulaService.drag.subscribe(([, source]: Array<HTMLElement>) =>\n      source.classList.add(GRID_HEADER_DRAGGING_CLASS)\n    );\n\n    dragulaService.dragend.subscribe(([, source]: Array<HTMLElement>) =>\n      source.classList.remove(GRID_HEADER_DRAGGING_CLASS)\n    );\n\n    dragulaService.drop.subscribe(([, , container]: Array<HTMLElement>) => {\n      let columnIds: string[] = [];\n      let nodes = container.getElementsByTagName('th');\n      for (let i = 0; i < nodes.length; i++) {\n        let el = nodes[i];\n        let id = el.getAttribute('sky-cmp-id');\n        columnIds.push(id);\n      }\n      dropCallback(columnIds);\n\n    });\n\n    dragulaService.setOptions('sky-grid-heading', {\n      moves: (el: HTMLElement, container: HTMLElement, handle: HTMLElement) => {\n        return handle !== undefined && !handle.matches(GRID_HEADER_LOCKED_SELECTOR);\n      },\n      accepts: (\n        el: HTMLElement,\n        target: HTMLElement,\n        source: HTMLElement,\n        sibling: HTMLElement) => {\n          return sibling === undefined || !sibling || !sibling.matches(GRID_HEADER_LOCKED_SELECTOR);\n        }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}