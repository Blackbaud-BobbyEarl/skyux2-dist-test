{"version":3,"sources":["../../../.srctemp/modules/list-filters/list-filter-summary.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EAET,MAAM,EACN,YAAY,EACb,MAAM,eAAA,CAAgB;AAEvB,OAAO,EACL,SAAS,EACT,mBAAmB,EACpB,MAAM,eAAA,CAAgB;AAOvB,OAAO,wBAAA,CAAyB;AAGhC;IAOE,uCACU,KAAgB,EAChB,UAA+B;QAD/B,UAAK,GAAL,KAAK,CAAW;QAChB,eAAU,GAAV,UAAU,CAAqB;QANlC,qBAAgB,GAAG,IAAI,YAAY,EAAmB,CAAC;IAO3D,CAAC;IAEG,0DAAkB,GAAzB;QACE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,KAAK;YACzC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,gEAAwB,GAA/B,UAAgC,KAAa;QAA7C,iBAKC;QAJC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,UAAC,OAAO;YAC5C,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzB,KAAI,CAAC,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,8DAAsB,GAA7B,UAA8B,IAAqB;QACjD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAyBH,oCAAC;AAAD,CApDA,AAoDC;;AAxBM,wCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,yBAAyB;gBACnC,QAAQ,EAAE,6VAUX;aACA,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,4CAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,SAAS,GAAG;IACnB,EAAC,IAAI,EAAE,mBAAmB,GAAG;CAC5B,EAH6F,CAG7F,CAAC;AACK,4CAAc,GAA2C;IAChE,kBAAkB,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;CACtC,CAAC","file":"list-filter-summary.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  AfterContentInit,\n  Output,\n  EventEmitter\n} from '@angular/core';\n\nimport {\n  ListState,\n  ListStateDispatcher\n} from '../list/state';\n\nimport {\n  ListFilterModel\n} from '../list/state';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/take';\n\n\nexport class SkyListFilterSummaryComponent implements AfterContentInit {\n\n  \n  public summaryItemClick = new EventEmitter<ListFilterModel>();\n\n  public appliedFilters: Observable<Array<ListFilterModel>>;\n\n  constructor(\n    private state: ListState,\n    private dispatcher: ListStateDispatcher\n  ) {}\n\n  public ngAfterContentInit() {\n    this.appliedFilters = this.state.map((state) => {\n      return state.filters;\n    });\n  }\n\n  public filterSummaryItemDismiss(index: number) {\n    this.appliedFilters.take(1).subscribe((filters) => {\n      filters.splice(index, 1);\n      this.dispatcher.filtersUpdate(filters.slice());\n    });\n  }\n\n  public filterSummaryItemClick(item: ListFilterModel) {\n    this.summaryItemClick.emit(item);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sky-list-filter-summary',\n  template: `<sky-filter-summary>\n  <sky-filter-summary-item\n    *ngFor=\"let item of appliedFilters | async; let i = index\"\n    (dismiss)=\"filterSummaryItemDismiss(i)\"\n    (itemClick)=\"filterSummaryItemClick(item)\"\n    [dismissible]=\"item.dismissible\"\n    >\n    {{item.label || item.value}}\n  </sky-filter-summary-item>\n</sky-filter-summary>\n`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ListState, },\n{type: ListStateDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'summaryItemClick': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}