import { AfterContentInit, ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/take';
import 'rxjs/add/operator/takeUntil';
import { ListToolbarItemModel, ListState, ListStateDispatcher, ListSortLabelModel, ListFilterModel } from '../list/state';
import { SkySearchComponent } from '../search';
import { ListToolbarState, ListToolbarStateDispatcher } from './state';
export declare class SkyListToolbarComponent implements OnInit, AfterContentInit, OnDestroy {
    private changeDetector;
    private state;
    private dispatcher;
    private toolbarState;
    toolbarDispatcher: ListToolbarStateDispatcher;
    placeholder: string;
    searchEnabled: boolean | Observable<boolean>;
    searchComponent: SkySearchComponent;
    sortSelectorEnabled: boolean | Observable<boolean>;
    toolbarType: string;
    searchText: string | Observable<string>;
    sortSelectors: Observable<Array<any>>;
    searchTextInput: Observable<string>;
    view: Observable<string>;
    leftTemplates: ListToolbarItemModel[];
    centerTemplates: ListToolbarItemModel[];
    rightTemplates: ListToolbarItemModel[];
    type: Observable<string>;
    isSearchEnabled: Observable<boolean>;
    isSortSelectorEnabled: Observable<boolean>;
    appliedFilters: Observable<Array<ListFilterModel>>;
    hasAppliedFilters: Observable<boolean>;
    showFilterSummary: boolean;
    hasInlineFilters: boolean;
    inlineFilterBarExpanded: boolean;
    hasAdditionalToolbarSection: boolean;
    private toolbarItems;
    private toolbarSorts;
    private filterSummary;
    private inlineFilter;
    private searchTemplate;
    private sortSelectorTemplate;
    private inlineFilterButtonTemplate;
    private hasSortSelectors;
    private ngUnsubscribe;
    constructor(changeDetector: ChangeDetectorRef, state: ListState, dispatcher: ListStateDispatcher, toolbarState: ListToolbarState, toolbarDispatcher: ListToolbarStateDispatcher);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    setSort(sort: ListSortLabelModel): void;
    inlineFilterButtonClick(): void;
    updateSearchText(searchText: string): void;
    private itemIsInView(itemView, activeView);
    private getSortSelectors();
    private watchTemplates();
}
