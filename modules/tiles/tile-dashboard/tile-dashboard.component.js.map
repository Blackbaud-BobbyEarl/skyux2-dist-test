{"version":3,"sources":["../../../../.srctemp/modules/tiles/tile-dashboard/tile-dashboard.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,SAAS,EACT,YAAY,EACZ,KAAK,EAEL,MAAM,EAEN,SAAS,EACT,YAAY,EACb,MAAM,eAAA,CAAgB;AAEvB,OAAO,EAAE,+BAAA,EAAgC,MAAO,0BAAA,CAA2B;AAE3E,OAAO,EAAE,uBAAA,EAAwB,MAAO,0BAAA,CAA2B;AAGnE;IA6BE;QACE,qFAAqF;QACrF,0DAA0D;QACnD,gBAAyC;QAHlD,iBAQC;QALQ,qBAAgB,GAAhB,gBAAgB,CAAyB;QAjB3C,iBAAY,GAAG,IAAI,YAAY,EAA0B,CAAC;QAUzD,cAAS,GAAG,KAAK,CAAC;QAElB,cAAS,GAAG,KAAK,CAAC;QAOxB,gBAAgB,CAAC,YAAY,CAAC,SAAS,CAAC,UAAC,MAA8B;YACrE,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;IAnCD,sBAAW,6CAAM;aAQjB;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;aAVD,UAAkB,KAA6B;YAC7C,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACtB,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,CAAC;QACH,CAAC;;;OAAA;IA+BM,mDAAe,GAAtB;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEM,+CAAW,GAAlB;QACE,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;IAClC,CAAC;IAEO,8CAAU,GAAlB;QAAA,iBAMC;QALC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAClC,UAAU,CAAC;gBACT,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,EAAE,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,YAAY,CAAC,CAAC;YAC3E,CAAC,EAAE,CAAC,CAAC,CAAC;QACR,CAAC;IACH,CAAC;IAgEH,gCAAC;AAAD,CAtHA,AAsHC;;AA/DM,oCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,oBAAoB;gBAC9B,MAAM,EAAE,CAAC,4iBAkCV,CAAC;gBACA,QAAQ,EAAE,+YAWX;gBACC,SAAS,EAAE,CAAC,uBAAuB,CAAC;aACrC,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,wCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,uBAAuB,GAAG;CAChC,EAF6F,CAE7F,CAAC;AACK,wCAAc,GAA2C;IAChE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;IACnC,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,+BAA+B,EAAG,EAAE,EAAE;IAC/E,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,cAAc,EAAE,EAAC,IAAI,EAAE,+BAA+B,EAAC,EAAG,EAAE,EAAE;CACxG,CAAC","file":"tile-dashboard.component.js","sourceRoot":"","sourcesContent":["import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewChildren\n} from '@angular/core';\n\nimport { SkyTileDashboardColumnComponent } from '../tile-dashboard-column';\nimport { SkyTileDashboardConfig } from '../tile-dashboard-config';\nimport { SkyTileDashboardService } from './tile-dashboard.service';\n\n\nexport class SkyTileDashboardComponent implements AfterViewInit, OnDestroy {\n  \n  public set config(value: SkyTileDashboardConfig) {\n    if (value && !this.configSet) {\n      this._config = value;\n      this.configSet = true;\n      this.checkReady();\n    }\n  }\n\n  public get config(): SkyTileDashboardConfig {\n    return this._config;\n  }\n\n  \n  public configChange = new EventEmitter<SkyTileDashboardConfig>();\n\n  \n  public columns: QueryList<SkyTileDashboardColumnComponent>;\n\n  \n  public singleColumn: SkyTileDashboardColumnComponent;\n\n  private _config: SkyTileDashboardConfig;\n\n  private configSet = false;\n\n  private viewReady = false;\n\n  constructor(\n    // HACK: This is public so it can be accessed via a unit test due to breaking changes\n    // in RC5. https://github.com/angular/angular/issues/10854\n    public dashboardService: SkyTileDashboardService\n  ) {\n    dashboardService.configChange.subscribe((config: SkyTileDashboardConfig) => {\n      this.configChange.emit(config);\n    });\n  }\n\n  public ngAfterViewInit() {\n    this.viewReady = true;\n    this.checkReady();\n  }\n\n  public ngOnDestroy() {\n    this.dashboardService.destroy();\n  }\n\n  private checkReady() {\n    if (this.viewReady && this.config) {\n      setTimeout(() => {\n        this.dashboardService.init(this.config, this.columns, this.singleColumn);\n      }, 0);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sky-tile-dashboard',\n  styles: [`:host {\n  display: flex;\n  padding: 0 10px;\n}\n\n.sky-tile-dashboard-layout-multi {\n  display: block;\n}\n\n.sky-tile-dashboard-layout-single {\n  display: none;\n}\n\n@media (max-width: 991px) {\n  :host {\n    display: block;\n    padding: 0;\n  }\n  .sky-tile-dashboard-layout-multi {\n    display: none;\n  }\n  .sky-tile-dashboard-layout-single {\n    display: block;\n  }\n  :host /deep/ .sky-tile-dashboard-column {\n    padding: 0;\n  }\n}\n\n@media (max-width: 767px) {\n  :host /deep/ .sky-tile {\n    margin-bottom: 0 !important;\n  }\n}\n`],\n  template: `<sky-tile-dashboard-column\n  *ngFor=\"let column of config?.layout?.multiColumn\"\n  class=\"sky-tile-dashboard-layout-multi\"\n  [ngStyle]=\"{\n    'flex-basis': (100 / config?.layout?.multiColumn.length) + '%'\n  }\"\n>\n</sky-tile-dashboard-column>\n<sky-tile-dashboard-column class=\"sky-tile-dashboard-layout-single\" #singleColumn>\n</sky-tile-dashboard-column>\n<ng-content></ng-content>\n`,\n  providers: [SkyTileDashboardService]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SkyTileDashboardService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'config': [{ type: Input },],\n'configChange': [{ type: Output },],\n'columns': [{ type: ViewChildren, args: [SkyTileDashboardColumnComponent, ] },],\n'singleColumn': [{ type: ViewChild, args: ['singleColumn', {read: SkyTileDashboardColumnComponent}, ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}