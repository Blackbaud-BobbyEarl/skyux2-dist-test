{"version":3,"sources":["../../../../.srctemp/modules/tiles/tile-dashboard/tile-dashboard.service.ts"],"names":[],"mappings":"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","file":"tile-dashboard.service.js","sourceRoot":"","sourcesContent":["import {\n  ComponentRef,\n  EventEmitter,\n  Injectable,\n  QueryList,\n  ReflectiveInjector\n} from '@angular/core';\nimport { DragulaService } from 'ng2-dragula/ng2-dragula';\n\nimport { Subscription } from 'rxjs/Subscription';\n\nimport {\n  SkyMediaBreakpoints,\n  SkyMediaQueryService\n} from '../../media-queries';\n\nimport { SkyTileComponent } from '../tile/tile.component';\nimport { SkyTileDashboardColumnComponent } from '../tile-dashboard-column';\nimport {\n  SkyTileDashboardConfig,\n  SkyTileDashboardConfigLayoutColumn,\n  SkyTileDashboardConfigLayoutTile,\n  SkyTileDashboardConfigTile\n} from '../tile-dashboard-config';\n\nconst ATTR_TILE_ID = '_sky-tile-dashboard-tile-id';\n\nlet bagIdIndex = 0;\n\nfunction getTileId(tile: SkyTileComponent): string {\n  if (tile) {\n    let el = tile.elementRef.nativeElement;\n    let tileId: string;\n\n    while (el) {\n      tileId = el.getAttribute(ATTR_TILE_ID);\n\n      if (tileId) {\n        return tileId;\n      }\n\n      el = el.parentElement;\n    }\n  }\n\n  return undefined;\n}\n\n\nexport class SkyTileDashboardService {\n  public bagId: string;\n\n  public configChange = new EventEmitter<SkyTileDashboardConfig>();\n\n  private tileComponents: ComponentRef<SkyTileComponent>[];\n\n  private config: SkyTileDashboardConfig;\n\n  private columns: QueryList<SkyTileDashboardColumnComponent>;\n\n  private singleColumn: SkyTileDashboardColumnComponent;\n\n  private mediaSubscription: Subscription;\n\n  constructor(\n    private dragulaService: DragulaService,\n    private mediaQuery: SkyMediaQueryService\n  ) {\n    this.bagId = 'sky-tile-dashboard-bag-' + (++bagIdIndex);\n\n    this.initMediaQueries();\n    this.initDragula();\n  }\n\n  public init(\n    config: SkyTileDashboardConfig,\n    columns?: QueryList<SkyTileDashboardColumnComponent>,\n    singleColumn?: SkyTileDashboardColumnComponent\n  ) {\n    this.config = config;\n    this.columns = columns;\n    this.singleColumn = singleColumn;\n\n    this.checkReady();\n  }\n\n  public addTileComponent(\n    tile: SkyTileDashboardConfigLayoutTile,\n    component: ComponentRef<any>\n  ) {\n    this.tileComponents = this.tileComponents || [];\n\n    this.tileComponents.push(component);\n\n    component.location.nativeElement.setAttribute(ATTR_TILE_ID, tile.id);\n  }\n\n  public tileIsCollapsed(tile: SkyTileComponent): boolean {\n    let tileConfig = this.findTile(getTileId(tile));\n\n    if (tileConfig) {\n      return tileConfig.isCollapsed;\n    }\n\n    return undefined;\n  }\n\n  public setTileCollapsed(tile: SkyTileComponent, isCollapsed: boolean) {\n    let tileConfig = this.findTile(getTileId(tile));\n\n    if (tileConfig) {\n      tileConfig.isCollapsed = isCollapsed;\n      this.configChange.emit(this.config);\n    }\n  }\n\n  public getTileComponentType(layoutTile: SkyTileDashboardConfigLayoutTile): any {\n    if (layoutTile) {\n      for (let tile of this.config.tiles) {\n        if (tile.id === layoutTile.id) {\n          return tile.componentType;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  public changeColumnMode(isSingleColumn: boolean) {\n    /*istanbul ignore else */\n    if (this.config) {\n      if (isSingleColumn) {\n        this.moveTilesToSingleColumn();\n      } else {\n        this.moveTilesToMultiColumn();\n      }\n    }\n  }\n\n  public getTileComponent(tileId: string): ComponentRef<any> {\n    for (let tileComponent of this.tileComponents) {\n      if (tileComponent.location.nativeElement.getAttribute(ATTR_TILE_ID) === tileId) {\n        return tileComponent;\n      }\n    }\n\n    /*istanbul ignore next */\n    return undefined;\n  }\n\n  public destroy() {\n    /*istanbul ignore else */\n    if (this.mediaSubscription) {\n      this.mediaSubscription.unsubscribe();\n    }\n  }\n\n  private getTile(layoutTile: SkyTileDashboardConfigLayoutTile): SkyTileDashboardConfigTile {\n    /*istanbul ignore else */\n    if (layoutTile) {\n      for (let tile of this.config.tiles) {\n        if (tile.id === layoutTile.id) {\n          return tile;\n        }\n      }\n    }\n\n    /*istanbul ignore next */\n    return undefined;\n  }\n\n  private checkReady() {\n    // The columns list is determined by the config options, so make sure that the columns\n    // and config are synced up before loading the tiles by waiting until change detection\n    // completes.\n    // setTimeout(() => {\n      if (this.config && this.columns) {\n        this.loadTiles();\n      }\n    // }, 0);\n  }\n\n  private loadTiles() {\n    let layout = this.config.layout;\n\n    if (\n        this.mediaQuery.current === SkyMediaBreakpoints.xs\n        || this.mediaQuery.current === SkyMediaBreakpoints.sm) {\n      for (let tile of layout.singleColumn.tiles) {\n        this.loadTileIntoColumn(this.singleColumn, tile);\n      }\n    } else {\n      let columns = this.columns.toArray();\n\n      for (let i = 0, n = layout.multiColumn.length; i < n; i++) {\n        let column = columns[i];\n\n        for (let tile of layout.multiColumn[i].tiles) {\n          this.loadTileIntoColumn(column, tile);\n        }\n      }\n    }\n  }\n\n  private loadTileIntoColumn(\n    column: SkyTileDashboardColumnComponent,\n    layoutTile: SkyTileDashboardConfigLayoutTile\n  ) {\n    let tile = this.getTile(layoutTile);\n\n    let componentType = tile.componentType;\n    let providers = tile.providers /* istanbul ignore next */ || [];\n\n    let resolvedProviders = ReflectiveInjector.resolve(providers);\n\n    let injector = ReflectiveInjector.fromResolvedProviders(resolvedProviders, column.injector);\n\n    let factory = column.resolver.resolveComponentFactory(componentType);\n    let componentRef = column.content.createComponent(factory, undefined, injector);\n\n    this.addTileComponent(layoutTile, componentRef);\n\n    // Make sure the component is marked for changes in case the parent component uses\n    // the OnPush change detection strategy.\n    componentRef.changeDetectorRef.markForCheck();\n  }\n\n  private moveTilesToSingleColumn() {\n    this.moveTilesToColumn(this.singleColumn, this.config.layout.singleColumn.tiles);\n  }\n\n  private moveTilesToMultiColumn() {\n    let layoutColumns = this.config.layout.multiColumn;\n    let columns = this.columns.toArray();\n\n    for (let i = 0, n = layoutColumns.length; i < n; i++) {\n      this.moveTilesToColumn(columns[i], layoutColumns[i].tiles);\n    }\n  }\n\n  private moveTilesToColumn(\n    column: SkyTileDashboardColumnComponent,\n    layoutTiles: SkyTileDashboardConfigLayoutTile[]\n  ) {\n    let columnEl = this.getColumnEl(column);\n\n    for (let layoutTile of layoutTiles) {\n      let tileComponentInstance = this.getTileComponent(layoutTile.id);\n\n      /*istanbul ignore else */\n      if (tileComponentInstance) {\n        columnEl.appendChild(\n          tileComponentInstance.location.nativeElement\n        );\n      }\n    }\n  }\n\n  private getConfigForUIState(): SkyTileDashboardConfig {\n    /*istanbul ignore else */\n    if (this.config) {\n      this.config = {\n        tiles: this.config.tiles,\n        layout: {\n          singleColumn: this.getSingleColumnLayoutForUIState(),\n          multiColumn: this.getMultiColumnLayoutForUIState()\n        }\n      };\n    }\n\n    return this.config;\n  }\n\n  private getSingleColumnLayoutForUIState(): SkyTileDashboardConfigLayoutColumn {\n    if (this.mediaQuery.current === SkyMediaBreakpoints.xs\n        || this.mediaQuery.current === SkyMediaBreakpoints.sm) {\n      return {\n        tiles: this.getTilesInEl(this.getColumnEl(this.singleColumn))\n      };\n    }\n\n    return this.config.layout.singleColumn;\n  }\n\n  private getMultiColumnLayoutForUIState(): SkyTileDashboardConfigLayoutColumn[] {\n    if (!(this.mediaQuery.current === SkyMediaBreakpoints.xs\n    || this.mediaQuery.current === SkyMediaBreakpoints.sm)) {\n      let layoutColumns: SkyTileDashboardConfigLayoutColumn[] = [];\n      let columns = this.columns.toArray();\n\n      for (let column of columns) {\n        if (column !== this.singleColumn) {\n          let layoutColumn: SkyTileDashboardConfigLayoutColumn = {\n            tiles: this.getTilesInEl(this.getColumnEl(column))\n          };\n\n          layoutColumns.push(layoutColumn);\n        }\n      }\n\n      return layoutColumns;\n    }\n\n    return this.config.layout.multiColumn;\n  }\n\n  private getTilesInEl(el: Element): SkyTileDashboardConfigLayoutTile[] {\n    let tileEls: any = el.querySelectorAll('[' + ATTR_TILE_ID + ']');\n    let layoutTiles: SkyTileDashboardConfigLayoutTile[] = [];\n\n        /*istanbul ignore else */\n    if (tileEls) {\n      for (let i = 0, n = tileEls.length; i < n; i++) {\n        let tileEl = tileEls[i];\n        let tileId = tileEl.getAttribute(ATTR_TILE_ID);\n        let tile = this.findTile(tileId);\n\n        /*istanbul ignore else */\n        if (tile) {\n          layoutTiles.push(tile);\n        }\n      }\n    }\n\n    return layoutTiles;\n  }\n\n  private initMediaQueries() {\n    this.mediaSubscription = this.mediaQuery.subscribe(\n      (args: SkyMediaBreakpoints) => {\n        this.changeColumnMode(args === SkyMediaBreakpoints.xs || args === SkyMediaBreakpoints.sm);\n      }\n    );\n  }\n\n  private initDragula() {\n    this.dragulaService.setOptions(this.bagId, {\n      moves: (el: HTMLElement, container: HTMLElement, handle: HTMLElement) => {\n        return handle.matches('.sky-tile-grab-handle');\n      }\n    });\n\n    this.dragulaService.drop.subscribe((value: any[]) => {\n      let config = this.getConfigForUIState();\n\n      /*istanbul ignore else */\n      if (config) {\n        this.configChange.emit(config);\n      }\n    });\n  }\n\n  private getColumnEl(column: SkyTileDashboardColumnComponent): Element {\n    return column.content.element.nativeElement.parentNode;\n  }\n\n  private findTile(tileId: string): SkyTileDashboardConfigLayoutTile {\n    /*istanbul ignore else */\n    if (this.config && this.config.layout.multiColumn) {\n      for (let column of this.config.layout.multiColumn) {\n        /*istanbul ignore else */\n        if (column.tiles) {\n          for (let tile of column.tiles) {\n            if (tile.id === tileId) {\n              return tile;\n            }\n          }\n        }\n      }\n    }\n\n    return undefined;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DragulaService, },\n{type: SkyMediaQueryService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}