import { AfterContentInit, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { ListSortFieldSelectorModel } from './state/sort/field-selector.model';
import { ListFilterModel } from './state/filters/filter.model';
import { ListDataResponseModel } from './list-data-response.model';
import { ListDataProvider } from './list-data.provider';
import { ListState, ListStateDispatcher } from './state';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/combineLatest';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/take';
import 'rxjs/add/operator/skip';
import { ListViewComponent } from './list-view.component';
import { ListItemModel } from './state/items/item.model';
export declare class SkyListComponent implements AfterContentInit, OnChanges {
    private state;
    private dispatcher;
    id: string;
    data?: Array<any> | Observable<Array<any>>;
    dataProvider?: ListDataProvider;
    defaultView?: ListViewComponent;
    initialTotal?: number;
    selectedIds?: Array<string> | Observable<Array<string>>;
    sortFields?: ListSortFieldSelectorModel | Array<ListSortFieldSelectorModel> | Observable<Array<ListSortFieldSelectorModel>> | Observable<ListSortFieldSelectorModel>;
    appliedFilters: Array<ListFilterModel>;
    selectedIdsChange: EventEmitter<Map<string, boolean>>;
    appliedFiltersChange: EventEmitter<ListFilterModel[]>;
    private searchFunction;
    private dataFirstLoad;
    private listViews;
    constructor(state: ListState, dispatcher: ListStateDispatcher);
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    refreshDisplayedItems(): void;
    readonly displayedItems: Observable<ListDataResponseModel>;
    readonly selectedItems: Observable<Array<ListItemModel>>;
    readonly lastUpdate: Observable<any>;
    readonly views: ListViewComponent[];
    readonly itemCount: Observable<number>;
}
