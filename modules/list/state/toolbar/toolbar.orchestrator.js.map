{"version":3,"sources":["../../../../../.srctemp/modules/list/state/toolbar/toolbar.orchestrator.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAC;AAC9D,OAAO,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AACnD,OAAO,EAAE,oBAAoB,EAAE,MAAM,sBAAsB,CAAC;AAC5D,OAAO,EACL,0BAA0B,EAC1B,4BAA4B,EAC5B,0BAA0B,EAC1B,wBAAwB,EACzB,MAAM,WAAW,CAAC;AAEnB;IACU,2CAAuC;IAC/C,0BAA0B;IAC1B;QAAA,YACE,iBAAO,SAOR;QALC,KAAI;aACD,QAAQ,CAAC,0BAA0B,EAAE,KAAI,CAAC,SAAS,CAAC;aACpD,QAAQ,CAAC,0BAA0B,EAAE,KAAI,CAAC,IAAI,CAAC;aAC/C,QAAQ,CAAC,wBAAwB,EAAE,KAAI,CAAC,OAAO,CAAC;aAChD,QAAQ,CAAC,4BAA4B,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;;IACzD,CAAC;IAEO,2CAAS,GAAjB,UACE,KAAuB,EACvB,MAAkC;QAElC,IAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC7C,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAChC,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAEO,yCAAO,GAAf,UACE,KAAuB,EACvB,MAAgC;QAEhC,IAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC7C,QAAQ,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QAC5B,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAEO,sCAAI,GAAZ,UACE,KAAuB,EACvB,MAAkC;QAElC,IAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC7C,IAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,oBAAoB,CAAC,IAAI,CAAC,EAA9B,CAA8B,CAAC,CAAC;QAE9E,IAAI,WAAW,GAAO,KAAK,CAAC,KAAK,QAAC,CAAC;QACnC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,KAAK,CAAC,CAAC,IAAI,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAC7D,WAAW,GAAO,WAAW,QAAK,YAAY,CAAC,CAAC;QAClD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9B,WAAW,GAAO,YAAY,QAAK,WAAW,CAAC,CAAC;QAClD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,YAAY,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,EAAzC,CAAyC,CAAC,CAAC;QACpF,CAAC;QAED,QAAQ,CAAC,KAAK,GAAG,WAAW,CAAC;QAE7B,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAEO,wCAAM,GAAd,UACE,KAAuB,EACvB,MAAoC;QAEpC,IAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAE7C,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,IAA0B;YAChE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IACH,8BAAC;AAAD,CAhEA,AAgEC,CA/DS,qBAAqB,GA+D9B","file":"toolbar.orchestrator.js","sourceRoot":"","sourcesContent":["import { ListStateOrchestrator } from '../list-state.rxstate';\nimport { ListToolbarModel } from './toolbar.model';\nimport { ListToolbarItemModel } from './toolbar-item.model';\nimport {\n  ListToolbarItemsLoadAction,\n  ListToolbarItemsRemoveAction,\n  ListToolbarSetExistsAction,\n  ListToolbarSetTypeAction\n} from './actions';\n\nexport class ListToolbarOrchestrator\n  extends ListStateOrchestrator<ListToolbarModel> {\n  /* istanbul ignore next */\n  constructor() {\n    super();\n\n    this\n      .register(ListToolbarSetExistsAction, this.setExists)\n      .register(ListToolbarItemsLoadAction, this.load)\n      .register(ListToolbarSetTypeAction, this.setType)\n      .register(ListToolbarItemsRemoveAction, this.remove);\n  }\n\n  private setExists(\n    state: ListToolbarModel,\n    action: ListToolbarSetExistsAction\n  ): ListToolbarModel {\n    const newModel = new ListToolbarModel(state);\n    newModel.exists = action.exists;\n    return newModel;\n  }\n\n  private setType(\n    state: ListToolbarModel,\n    action: ListToolbarSetTypeAction\n  ): ListToolbarModel {\n    const newModel = new ListToolbarModel(state);\n    newModel.type = action.type;\n    return newModel;\n  }\n\n  private load(\n    state: ListToolbarModel,\n    action: ListToolbarItemsLoadAction\n  ): ListToolbarModel {\n    const newModel = new ListToolbarModel(state);\n    const newListItems = action.items.map(item => new ListToolbarItemModel(item));\n\n    let resultItems = [...state.items];\n    if (action.index === -1 || action.index > state.items.length) {\n      resultItems = [...resultItems, ...newListItems];\n    } else if (action.index === 0) {\n      resultItems = [...newListItems, ...resultItems];\n    } else {\n      newListItems.reverse().forEach(item => resultItems.splice(action.index, 0, item));\n    }\n\n    newModel.items = resultItems;\n\n    return newModel;\n  }\n\n  private remove(\n    state: ListToolbarModel,\n    action: ListToolbarItemsRemoveAction\n  ): ListToolbarModel {\n    const newModel = new ListToolbarModel(state);\n\n    newModel.items = newModel.items.filter((item: ListToolbarItemModel) => {\n      return action.ids.indexOf(item.id) === -1;\n    });\n\n    return newModel;\n  }\n}\n"]}