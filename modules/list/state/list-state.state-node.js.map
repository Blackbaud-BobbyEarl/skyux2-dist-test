{"version":3,"sources":["../../../../.srctemp/modules/list/state/list-state.state-node.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,SAAA,EAAU,MAAO,wBAAA,CAAyB;AAEnD,OAAO,EAAE,cAAA,EAAe,MAAO,oBAAA,CAAqB;AACpD,OAAO,EAAE,mBAAA,EAAoB,MAAO,sBAAA,CAAuB;AAE3D,OAAO,EAAE,uBAAA,EAAwB,MAAO,gCAAA,CAAiC;AACzE,OAAO,EAAE,qBAAA,EAAsB,MAAO,4BAAA,CAA6B;AACnE,OAAO,EAAE,sBAAA,EAAuB,MAAO,8BAAA,CAA+B;AACtE,OAAO,EAAE,qBAAA,EAAsB,MAAO,4BAAA,CAA6B;AACnE,OAAO,EAAE,uBAAA,EAAwB,MAAO,gCAAA,CAAiC;AACzE,OAAO,EAAE,sBAAA,EAAuB,MAAO,8BAAA,CAA+B;AACtE,OAAO,EAAE,wBAAA,EAAyB,MAAO,kCAAA,CAAmC;AAC5E,OAAO,EAAE,oBAAA,EAAqB,MAAO,0BAAA,CAA2B;AAGhE;IAA+B,6BAAyB;IACtD,mBAAY,UAA+B;QAA3C,YACE,kBAAM,IAAI,cAAc,EAAE,EAAE,UAAU,CAAC,SAYxC;QAVC,KAAI;aACD,QAAQ,CAAC,SAAS,EAAE,uBAAuB,CAAC;aAC5C,QAAQ,CAAC,OAAO,EAAE,qBAAqB,CAAC;aACxC,QAAQ,CAAC,QAAQ,EAAE,sBAAsB,CAAC;aAC1C,QAAQ,CAAC,QAAQ,EAAE,sBAAsB,CAAC;aAC1C,QAAQ,CAAC,MAAM,EAAE,oBAAoB,CAAC;aACtC,QAAQ,CAAC,SAAS,EAAE,uBAAuB,CAAC;aAC5C,QAAQ,CAAC,OAAO,EAAE,qBAAqB,CAAC;aACxC,QAAQ,CAAC,UAAU,EAAE,wBAAwB,CAAC;aAC9C,KAAK,EAAE,CAAC;;IACb,CAAC;IAQH,gBAAC;AAAD,CAtBA,AAsBC,CAtB8B,SAAS;;AAejC,oBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,wBAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,mBAAmB,GAAG;CAC5B,EAF6F,CAE7F,CAAC","file":"list-state.state-node.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { StateNode } from 'microedge-rxstate/dist';\n\nimport { ListStateModel } from './list-state.model';\nimport { ListStateDispatcher } from './list-state.rxstate';\n\nimport { ListFiltersOrchestrator } from './filters/filters.orchestrator';\nimport { ListItemsOrchestrator } from './items/items.orchestrator';\nimport { ListPagingOrchestrator } from './paging/paging.orchestrator';\nimport { ListViewsOrchestrator } from './views/views.orchestrator';\nimport { ListToolbarOrchestrator } from './toolbar/toolbar.orchestrator';\nimport { ListSearchOrchestrator } from './search/search.orchestrator';\nimport { ListSelectedOrchestrator } from './selected/selected.orchestrator';\nimport { ListSortOrchestrator } from './sort/sort.orchestrator';\n\n\nexport class ListState extends StateNode<ListStateModel> {\n  constructor(dispatcher: ListStateDispatcher) {\n    super(new ListStateModel(), dispatcher);\n\n    this\n      .register('filters', ListFiltersOrchestrator)\n      .register('items', ListItemsOrchestrator)\n      .register('paging', ListPagingOrchestrator)\n      .register('search', ListSearchOrchestrator)\n      .register('sort', ListSortOrchestrator)\n      .register('toolbar', ListToolbarOrchestrator)\n      .register('views', ListViewsOrchestrator)\n      .register('selected', ListSelectedOrchestrator)\n      .begin();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ListStateDispatcher, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}