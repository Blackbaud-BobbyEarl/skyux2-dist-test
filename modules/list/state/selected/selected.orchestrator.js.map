{"version":3,"sources":["../../../../../.srctemp/modules/list/state/selected/selected.orchestrator.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAC;AAC9D,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAEnD,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AACrD,OAAO,EACL,sBAAsB,EACtB,4BAA4B,EAC5B,iCAAiC,EACjC,kCAAkC,EACnC,MAAM,WAAW,CAAC;AAEnB,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEjC;IAA8C,4CAAmD;IAC/F,0BAA0B;IAC1B;QAAA,YACE,iBAAO,SAOR;QALC,KAAI;aACD,QAAQ,CAAC,4BAA4B,EAAE,KAAI,CAAC,UAAU,CAAC;aACvD,QAAQ,CAAC,iCAAiC,EAAE,KAAI,CAAC,eAAe,CAAC;aACjE,QAAQ,CAAC,kCAAkC,EAAE,KAAI,CAAC,gBAAgB,CAAC;aACnE,QAAQ,CAAC,sBAAsB,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;;IACjD,CAAC;IAEO,6CAAU,GAAlB,UACE,KAAmC,EACnC,MAAoC;QACpC,MAAM,CAAC,IAAI,SAAS,CAAoB,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IACxF,CAAC;IAEO,uCAAI,GAAZ,UACE,KAAmC,EACnC,MAA8B;QAC9B,IAAM,WAAW,GAAG,IAAI,iBAAiB,EAAE,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,EAAtC,CAAsC,CAAC,CAAC;QAE9D,MAAM,CAAC,IAAI,SAAS,CAClB,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,EAC1C,MAAM,EAAE,EACR,KAAK,CACN,CAAC;IACJ,CAAC;IAEO,kDAAe,GAAvB,UACE,KAAmC,EACnC,MAAyC;QACzC,IAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;QAClD,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;QAE1D,MAAM,CAAC,IAAI,SAAS,CAAoB,WAAW,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;IACxF,CAAC;IAEO,mDAAgB,GAAxB,UACE,KAAmC,EACnC,MAA0C;QAC1C,IAAM,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,IAAI,iBAAiB,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;QAE7F,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAjD,CAAiD,CAAC,CAAC;QAEzE,MAAM,CAAC,IAAI,SAAS,CAAoB,WAAW,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;IACxF,CAAC;IACH,+BAAC;AAAD,CAjDA,AAiDC,CAjD6C,qBAAqB,GAiDlE","file":"selected.orchestrator.js","sourceRoot":"","sourcesContent":["import { ListStateOrchestrator } from '../list-state.rxstate';\nimport { AsyncItem } from 'microedge-rxstate/dist';\n\nimport { ListSelectedModel } from './selected.model';\nimport {\n  ListSelectedLoadAction,\n  ListSelectedSetLoadingAction,\n  ListSelectedSetItemSelectedAction,\n  ListSelectedSetItemsSelectedAction\n} from './actions';\n\nconst moment = require('moment');\n\nexport class ListSelectedOrchestrator extends ListStateOrchestrator<AsyncItem<ListSelectedModel>> {\n  /* istanbul ignore next */\n  constructor() {\n    super();\n\n    this\n      .register(ListSelectedSetLoadingAction, this.setLoading)\n      .register(ListSelectedSetItemSelectedAction, this.setItemSelected)\n      .register(ListSelectedSetItemsSelectedAction, this.setItemsSelected)\n      .register(ListSelectedLoadAction, this.load);\n  }\n\n  private setLoading(\n    state: AsyncItem<ListSelectedModel>,\n    action: ListSelectedSetLoadingAction): AsyncItem<ListSelectedModel> {\n    return new AsyncItem<ListSelectedModel>(state.item, state.lastUpdate, action.loading);\n  }\n\n  private load(\n    state: AsyncItem<ListSelectedModel>,\n    action: ListSelectedLoadAction): AsyncItem<ListSelectedModel> {\n    const newSelected = new ListSelectedModel();\n    action.items.map(s => newSelected.selectedIdMap.set(s, true));\n\n    return new AsyncItem<ListSelectedModel>(\n      Object.assign({}, state.item, newSelected),\n      moment(),\n      false\n    );\n  }\n\n  private setItemSelected(\n    state: AsyncItem<ListSelectedModel>,\n    action: ListSelectedSetItemSelectedAction): AsyncItem<ListSelectedModel> {\n    const newSelected = Object.assign({}, state.item);\n    newSelected.selectedIdMap.set(action.id, action.selected);\n\n    return new AsyncItem<ListSelectedModel>(newSelected, state.lastUpdate, state.loading);\n  }\n\n  private setItemsSelected(\n    state: AsyncItem<ListSelectedModel>,\n    action: ListSelectedSetItemsSelectedAction): AsyncItem<ListSelectedModel> {\n    const newSelected = action.refresh ? new ListSelectedModel() : Object.assign({}, state.item);\n\n    action.items.map(s => newSelected.selectedIdMap.set(s, action.selected));\n\n    return new AsyncItem<ListSelectedModel>(newSelected, state.lastUpdate, state.loading);\n  }\n}\n"]}