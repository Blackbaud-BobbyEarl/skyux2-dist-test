{"version":3,"sources":["../../../.srctemp/modules/tabs/tabset-adapter.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAc,YAAA,EAAc,UAAA,EAAW,MAAO,eAAA,CAAgB;AAGrE;IAAA;QACS,mBAAc,GAAG,IAAI,YAAY,EAAW,CAAC;QAE7C,oBAAe,GAAG,KAAK,CAAC;IAqCjC,CAAC;IA7BQ,sCAAI,GAAX,UAAY,KAAiB;QAC3B,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QAC3D,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;QACpE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;QAEpE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEM,gDAAc,GAArB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3B,IAAI,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC;YAClC,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;YACpE,EAAE,CAAC,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC;gBAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;oBACzB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;oBAC7B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAClC,CAAC;YACH,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;gBAC5B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjC,CAAC;QACH,CAAC;IACH,CAAC;IAOH,8BAAC;AAAD,CAxCA,AAwCC;;AANM,kCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,sCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"tabset-adapter.service.js","sourceRoot":"","sourcesContent":["import { ElementRef, EventEmitter, Injectable } from '@angular/core';\n\n\nexport class SkyTabsetAdapterService {\n  public overflowChange = new EventEmitter<boolean>();\n\n  public currentOverflow = false;\n\n  private el: HTMLElement;\n\n  private tabsEl: HTMLElement;\n\n  private bntsEl: HTMLElement;\n\n  public init(elRef: ElementRef) {\n    this.el = elRef.nativeElement.querySelector('.sky-tabset');\n    this.tabsEl = elRef.nativeElement.querySelector('.sky-tabset-tabs');\n    this.bntsEl = elRef.nativeElement.querySelector('.sky-tabset-btns');\n\n    this.detectOverflow();\n  }\n\n  public detectOverflow() {\n    if (this.el && this.tabsEl) {\n      let elWidth = this.el.offsetWidth;\n      let tabsElWidth = this.tabsEl.offsetWidth + this.bntsEl.offsetWidth;\n      if (tabsElWidth < elWidth) {\n        if (this.currentOverflow) {\n          this.currentOverflow = false;\n          this.overflowChange.emit(false);\n        }\n      } else if (!this.currentOverflow) {\n        this.currentOverflow = true;\n        this.overflowChange.emit(true);\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}