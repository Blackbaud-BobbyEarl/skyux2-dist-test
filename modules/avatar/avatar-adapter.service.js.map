{"version":3,"sources":["../../../.srctemp/modules/avatar/avatar-adapter.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAc,UAAA,EAAW,MAAO,eAAA,CAAgB;AAKvD;IAAA;IAsDA,CAAC;IAnDQ,6CAAW,GAAlB,UAAmB,UAAsB,EAAE,GAAiB;QAC1D,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,EAAE,GAAG,UAAU,CAAC,aAAa,CAAC;QAElC,yBAAyB;QACzB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACP,IAAI,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;YAEpD,yBAAyB;YACzB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACZ,IAAI,GAAG,SAAQ,CAAC;gBAEhB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,EAAE,CAAC,CAAC,GAAG,YAAY,IAAI,IAAI,GAAG,YAAY,IAAI,CAAC,CAAC,CAAC;wBAC/C,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;oBAChC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,GAAG,GAAG,GAAG,CAAC;oBACZ,CAAC;gBACH,CAAC;gBAED,OAAO,CAAC,KAAK,CAAC,eAAe,GAAG,GAAG,GAAG,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC;YAChE,CAAC;QACH,CAAC;IACH,CAAC;IAEM,yCAAO,GAAd;QACE,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAEO,+CAAa,GAArB,UAAsB,GAAgB;QACnC,IAAI,GAAG,GAAG,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAElC,2DAA2D;QAC3D,uEAAuE;QACvE,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;QACnB,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAEO,+CAAa,GAArB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAClC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;QAC3B,CAAC;IACH,CAAC;IAOH,8BAAC;AAAD,CAtDA,AAsDC;;AANM,kCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,sCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"avatar-adapter.service.js","sourceRoot":"","sourcesContent":["import { ElementRef, Injectable } from '@angular/core';\n\nimport { SkyAvatarSrc } from './avatar-src';\n\n\nexport class SkyAvatarAdapterService {\n  private blobUrl: string;\n\n  public updateImage(elementRef: ElementRef, src: SkyAvatarSrc) {\n    this.revokeBlobUrl();\n\n    let el = elementRef.nativeElement;\n\n    /*istanbul ignore else */\n    if (el) {\n      let imageEl = el.querySelector('.sky-avatar-image');\n\n      /*istanbul ignore else */\n      if (imageEl) {\n        let url: string;\n\n        if (src) {\n          if (src instanceof File || src instanceof Blob) {\n            url = this.createBlobUrl(src);\n          } else {\n            url = src;\n          }\n        }\n\n        imageEl.style.backgroundImage = url ? 'url(' + url + ')' : '';\n      }\n    }\n  }\n\n  public destroy() {\n    this.revokeBlobUrl();\n  }\n\n  private createBlobUrl(src: Blob | File) {\n     let url = URL.createObjectURL(src);\n\n      // Keep the last blob URL around so we can revoke it later.\n      // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL\n      this.blobUrl = url;\n      return url;\n  }\n\n  private revokeBlobUrl() {\n    if (this.blobUrl) {\n      URL.revokeObjectURL(this.blobUrl);\n      this.blobUrl = undefined;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}