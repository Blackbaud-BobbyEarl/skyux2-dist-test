{"version":3,"sources":["../../../.srctemp/modules/autocomplete/autocomplete-input.directive.ts"],"names":[],"mappings":"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","file":"autocomplete-input.directive.js","sourceRoot":"","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  OnDestroy,\n  OnInit,\n  Renderer2\n} from '@angular/core';\n\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR\n} from '@angular/forms';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/fromEvent';\nimport { Subject } from 'rxjs/Subject';\nimport 'rxjs/add/operator/takeUntil';\n\nimport {\n  SkyAutocompleteInputTextChange\n} from './types';\n\n\nexport class SkyAutocompleteInputDirective\n  implements OnInit, OnDestroy, ControlValueAccessor {\n\n  public get displayWith(): string {\n    return this._displayWith;\n  }\n\n  public set displayWith(value: string) {\n    this._displayWith = value;\n    this.textValue = this.value[this.displayWith];\n  }\n\n  public get value() {\n    return this._value || { };\n  }\n\n  public set value(value: any) {\n    this._value = value;\n    this.textValue = this.value[this.displayWith];\n    this.onChange(this.value);\n    this.onTouched();\n  }\n\n  public set textValue(value: string) {\n    this.elementRef.nativeElement.value = value || '';\n  }\n\n  public textChanges = new EventEmitter<SkyAutocompleteInputTextChange>();\n  public blur = new EventEmitter<void>();\n\n  private ngUnsubscribe = new Subject();\n  private _displayWith: string;\n  private _value: any;\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2\n  ) { }\n\n  public ngOnInit() {\n    const element = this.elementRef.nativeElement;\n\n    this.setAttributes(element);\n\n    Observable\n      .fromEvent(element, 'keyup')\n      .takeUntil(this.ngUnsubscribe)\n      .subscribe(() => {\n        this.textChanges.emit({\n          value: this.elementRef.nativeElement.value\n        });\n      });\n\n    Observable\n      .fromEvent(element, 'blur')\n      .takeUntil(this.ngUnsubscribe)\n      .subscribe(() => {\n        this.checkValues();\n      });\n  }\n\n  public ngOnDestroy(): void {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n\n  public writeValue(value: any): void {\n    if (value) {\n      this.value = value;\n    }\n  }\n\n  public registerOnChange(fn: (value: any) => void): void {\n    this.onChange = fn;\n  }\n\n  public registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  // Angular automatically constructs these methods.\n  /* istanbul ignore next */\n  public onChange(value: any): void { }\n  /* istanbul ignore next */\n  public onTouched(): void { }\n\n  private setAttributes(element: any): void {\n    this.renderer.setAttribute(element, 'autocomplete', 'off');\n    this.renderer.setAttribute(element, 'autocapitalize', 'off');\n    this.renderer.setAttribute(element, 'autocorrect', 'off');\n    this.renderer.setAttribute(element, 'spellcheck', 'false');\n    this.renderer.addClass(element, 'sky-form-control');\n  }\n\n  private checkValues(): void {\n    const text = this.elementRef.nativeElement.value;\n    const displayValue = this.value[this.displayWith];\n\n    // If the search field contains text, make sure that the value\n    // matches the selected descriptor key.\n    if (text && displayValue) {\n      if (text !== displayValue) {\n        this.textValue = displayValue;\n      }\n    } else {\n      // The search field is empty (or doesn't have a selected item),\n      // so clear out the selected value.\n      this.value = { };\n    }\n\n    this.blur.emit();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[skyAutocomplete], textarea[skyAutocomplete]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      /* tslint:disable-next-line:no-forward-ref */\n      useExisting: forwardRef(() => SkyAutocompleteInputDirective),\n      multi: true\n    }\n  ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}