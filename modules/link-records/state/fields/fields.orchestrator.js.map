{"version":3,"sources":["../../../../../.srctemp/modules/link-records/state/fields/fields.orchestrator.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,+BAA+B,EAAE,MAAM,+BAA+B,CAAC;AAChF,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACnD,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAGjC,OAAO,EACL,mCAAmC,EACnC,qCAAqC,EACtC,MAAM,WAAW,CAAC;AAEnB;IACU,oDAC4B;IACpC;QAAA,YACE,iBAAO,SAKR;QAHC,KAAI;aACD,QAAQ,CAAC,mCAAmC,EAAE,KAAI,CAAC,SAAS,CAAC;aAC7D,QAAQ,CAAC,qCAAqC,EAAE,KAAI,CAAC,WAAW,CAAC,CAAC;;IACvE,CAAC;IAEO,oDAAS,GAAjB,UACE,KAAkE,EAClE,MAA2C;QAEzC,IAAI,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,MAAM,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;QACxE,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;QACpE,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;QAErC,MAAM,CAAC,IAAI,SAAS,CAClB,YAAY,EAAE,MAAM,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IAEO,sDAAW,GAAnB,UACE,KAAkE,EAClE,MAA2C;QAEzC,IAAI,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;QACjD,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;QAErC,MAAM,CAAC,IAAI,SAAS,CAClB,YAAY,EAAE,MAAM,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IACH,uCAAC;AAAD,CAlCA,AAkCC,CAjCS,+BAA+B,GAiCxC","file":"fields.orchestrator.js","sourceRoot":"","sourcesContent":["import { SkyLinkRecordsStateOrchestrator } from '../link-records-state.rxstate';\nimport { AsyncItem } from 'microedge-rxstate/dist';\nconst moment = require('moment');\n\nimport { SkyLinkRecordsFieldModel } from './field.model';\nimport {\n  SkyLinkRecordsFieldsSetFieldsAction,\n  SkyLinkRecordsFieldsClearFieldsAction\n} from './actions';\n\nexport class SkyLinkRecordsFieldsOrchestrator\n  extends SkyLinkRecordsStateOrchestrator<AsyncItem<{[key: string]:\n    Array<SkyLinkRecordsFieldModel>}>> {\n  constructor() {\n    super();\n\n    this\n      .register(SkyLinkRecordsFieldsSetFieldsAction, this.setFields)\n      .register(SkyLinkRecordsFieldsClearFieldsAction, this.clearFields);\n  }\n\n  private setFields(\n    state: AsyncItem<{[key: string]: Array<SkyLinkRecordsFieldModel>}>,\n    action: SkyLinkRecordsFieldsSetFieldsAction):\n      AsyncItem<{[key: string]: Array<SkyLinkRecordsFieldModel>}> {\n      let newStateItem = Object.assign({}, state.item);\n      let fields = (newStateItem[action.key]) ? newStateItem[action.key] : [];\n      let newFields = Object.assign(fields, action.fields).filter(f => f);\n      newStateItem[action.key] = newFields;\n\n      return new AsyncItem<{[key: string]: Array<SkyLinkRecordsFieldModel>}>(\n        newStateItem, moment(), state.loading);\n  }\n\n  private clearFields(\n    state: AsyncItem<{[key: string]: Array<SkyLinkRecordsFieldModel>}>,\n    action: SkyLinkRecordsFieldsSetFieldsAction):\n      AsyncItem<{[key: string]: Array<SkyLinkRecordsFieldModel>}> {\n      let newStateItem = Object.assign({}, state.item);\n      newStateItem[action.key] = undefined;\n\n      return new AsyncItem<{[key: string]: Array<SkyLinkRecordsFieldModel>}>(\n        newStateItem, moment(), state.loading);\n  }\n}\n"]}