{"version":3,"sources":["../../../.srctemp/modules/autocomplete/autocomplete-adapter.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,UAAU,EAEV,gBAAgB,EACjB,MAAM,eAAA,CAAgB;AAEvB,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAC7C,OAAO,+BAAA,CAAgC;AAEvC,OAAO,EACL,mBAAmB,EACpB,MAAM,WAAA,CAAY;AAGnB;IAGE,uCACU,eAAiC,EACjC,SAA8B;QAD9B,oBAAe,GAAf,eAAe,CAAkB;QACjC,cAAS,GAAT,SAAS,CAAqB;QAEtC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAC5E,CAAC;IAEM,0DAAkB,GAAzB,UAA0B,UAAsB;QAAhD,iBAUC;QATC,UAAU;aACP,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,QAAQ,CAAC;aAC/C,SAAS,CAAC;YACT,KAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC;YACpC,KAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,wDAAgB,GAAxB,UAAyB,UAAsB;QAC7C,IAAM,iBAAiB,GAAG,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC;QAC3F,IAAM,KAAK,GAAG,UAAU,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC,KAAK,CAAC;QACrE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,EAAE,OAAO,EAAK,KAAK,OAAI,CAAC,CAAC;IACnE,CAAC;IASH,oCAAC;AAAD,CAnCA,AAmCC;;AARM,wCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,4CAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,gBAAgB,GAAG;IAC1B,EAAC,IAAI,EAAE,mBAAmB,GAAG;CAC5B,EAH6F,CAG7F,CAAC","file":"autocomplete-adapter.service.js","sourceRoot":"","sourcesContent":["import {\n  ElementRef,\n  Injectable,\n  Renderer2,\n  RendererFactory2\n} from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/fromEvent';\n\nimport {\n  SkyWindowRefService\n} from '../window';\n\n\nexport class SkyAutocompleteAdapterService {\n  private renderer: Renderer2;\n\n  constructor(\n    private rendererFactory: RendererFactory2,\n    private windowRef: SkyWindowRefService\n  ) {\n    this.renderer = this.rendererFactory.createRenderer(undefined, undefined);\n  }\n\n  public watchDropdownWidth(elementRef: ElementRef): void {\n    Observable\n      .fromEvent(this.windowRef.getWindow(), 'resize')\n      .subscribe(() => {\n        this.setDropdownWidth(elementRef);\n      });\n\n    this.windowRef.getWindow().setTimeout(() => {\n      this.setDropdownWidth(elementRef);\n    });\n  }\n\n  private setDropdownWidth(elementRef: ElementRef): void {\n    const dropdownContainer = elementRef.nativeElement.querySelector('.sky-popover-container');\n    const width = elementRef.nativeElement.getBoundingClientRect().width;\n    this.renderer.setStyle(dropdownContainer, 'width', `${width}px`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: RendererFactory2, },\n{type: SkyWindowRefService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}