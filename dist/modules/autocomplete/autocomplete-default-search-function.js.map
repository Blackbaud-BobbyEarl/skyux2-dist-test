{"version":3,"sources":["../../../.srctemp/modules/autocomplete/autocomplete-default-search-function.ts"],"names":[],"mappings":"AAOA,MAAM,+CACJ,OAAoD;IAGpD,IAAM,UAAU,GAAG,UAAU,UAAkB,EAAE,IAAW;QAC1D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAC,IAAS;YAC3B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC5D,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YAED,uEAAuE;YACvE,IAAM,YAAY,GAAG,OAAO,CAAC,aAAa;iBACvC,IAAI,CAAC,UAAC,MAA2C;gBAChD,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;YAC9C,CAAC,CAAC,CAAC;YAEL,MAAM,CAAC,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,IAAM,MAAM,GAAG,UACb,UAAkB,EAClB,IAAW;QAGX,IAAM,eAAe,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;QACjD,IAAM,YAAY,GAAG,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAClD,IAAM,OAAO,GAAG,EAAE,CAAC;gCAEV,CAAC,EAAM,CAAC;YACf,IAAM,YAAY,GAAG,CACnB,OAAO,CAAC,kBAAkB;gBAC1B,OAAO,CAAC,kBAAkB,IAAI,OAAO,CAAC,MAAM,CAC7C,CAAC;YAEF,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACV,OAAO;YAChB,CAAC;YAED,IAAM,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAM,OAAO,GAAG,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAC,QAAgB;gBAC/D,IAAM,KAAK,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;gBAChE,MAAM,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACZ,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACvB,CAAC;QACH,CAAC;QAnBD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;kCAA1C,CAAC,EAAM,CAAC;;;SAmBhB;QAED,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC,CAAC;IAEF,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC","file":"autocomplete-default-search-function.js","sourceRoot":"","sourcesContent":["import {\n  SkyAutocompleteSearchFunction,\n  SkyAutocompleteSearchFunctionFilter,\n  SkyAutocompleteSearchFunctionResponse,\n  SkyAutocompleteDefaultSearchFunctionOptions\n} from './types';\n\nexport function skyAutocompleteDefaultSearchFunction(\n  options: SkyAutocompleteDefaultSearchFunctionOptions\n): SkyAutocompleteSearchFunction {\n\n  const filterData = function (searchText: string, data: any[]): any[] {\n    return data.filter((item: any) => {\n      if (!options.searchFilters || !options.searchFilters.length) {\n        return true;\n      }\n\n      // Find the first failing filter (we can skip the others if one fails).\n      const failedFilter = options.searchFilters\n        .find((filter: SkyAutocompleteSearchFunctionFilter) => {\n          return !(filter.call({}, searchText, item));\n        });\n\n      return (failedFilter === undefined);\n    });\n  };\n\n  const search = function (\n    searchText: string,\n    data: any[]\n  ): SkyAutocompleteSearchFunctionResponse {\n\n    const searchTextLower = searchText.toLowerCase();\n    const filteredData = filterData(searchText, data);\n    const results = [];\n\n    for (let i = 0, n = filteredData.length; i < n; i++) {\n      const limitReached = (\n        options.searchResultsLimit &&\n        options.searchResultsLimit <= results.length\n      );\n\n      if (limitReached) {\n        return results;\n      }\n\n      const result = filteredData[i];\n      const isMatch = options.propertiesToSearch.find((property: string) => {\n        const value = (result[property] || '').toString().toLowerCase();\n        return (value.indexOf(searchTextLower) > -1);\n      });\n\n      if (isMatch) {\n        results.push(result);\n      }\n    }\n\n    return results;\n  };\n\n  return search;\n}\n"]}