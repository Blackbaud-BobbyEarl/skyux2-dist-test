{"version":3,"sources":["../../../.srctemp/modules/numeric/numeric.service.ts"],"names":[],"mappings":"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","file":"numeric.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CurrencyPipe, DecimalPipe } from '@angular/common';\nimport { SkyResources } from '../resources/resources';\nimport { NumericOptions } from './numeric.options';\n\n\nexport class SkyNumericService {\n  public rx: RegExp;\n  public shortSymbol: string;\n\n  constructor(\n    private readonly currencyPipe: CurrencyPipe,\n    private readonly decimalPipe: DecimalPipe) {\n  }\n\n  public formatNumber(value: number, options: NumericOptions): string {\n\n    let si = [\n      { value: 1E12, symbol: SkyResources.getString('number_trillion_abrev') },\n      { value: 1E9, symbol: SkyResources.getString('number_billion_abrev') },\n      { value: 1E6, symbol: SkyResources.getString('number_million_abrev') },\n      { value: 1E3, symbol: SkyResources.getString('number_thousands_abrev') }\n    ];\n    this.rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n    let i: number;\n    let sValue: string;\n    this.shortSymbol = '';\n\n    // Shortens with or without symbol (K/M/B/T) depending on value of number\n    for (i = 0; i < si.length; i++) {\n      // Checks both positive and negative of value to ensure negative numbers are shortened\n      if (value >= si[i].value || -value >= si[i].value) {\n        // Using Math.round to ensure accurate rounding compared to toFixed\n        sValue = Number(Math.round(parseFloat((value / si[i].value) + 'e' + options.digits))\n          + 'e-' + options.digits).toString().replace(this.rx, '$1') + si[i].symbol;\n        break;\n      } else {\n        sValue = Number(Math.round(parseFloat(value + 'e' + options.digits))\n          + 'e-' + options.digits).toString().replace(this.rx, '$1');\n      }\n    }\n\n    // Checks the string entered for format. toLowerCase to ignore case.\n    // else statement is a catch all to ensure that if anything but currency (or a future option)\n    // are entered, it will be treated like a number.\n    if (options.format.toLowerCase() === 'currency') {\n      // Stores the symbol added from shortening (K/M/B/T) to reapply later\n      this.storeShortenSymbol(sValue);\n\n      // Currency formatting via Currency Pipe. In a case where, value was not shortened\n      // AND there are \"cents\" in the value AND the digit input is 2 or higher, it forces 2 digits.\n      // This prevents a value like $15.50 from displaying as $15.5\n      // Note: This will need to be reviewed if we support currencies with three decimal digits\n      if (value < si[si.length - 1].value && value % 1 !== 0 && options.digits >= 2) {\n        sValue = this.currencyPipe.transform(parseFloat(sValue), options.iso,\n         true, '1.2-' + options.digits);\n      } else {\n        sValue = this.currencyPipe.transform(parseFloat(sValue), options.iso,\n         true, '1.0-' + options.digits);\n      }\n\n      // Replaces shorten symbol after currency formatting\n      sValue = this.replaceShortenSymbol(sValue);\n    } else {\n      // Stores the symbol added from shortening (K/M/B/T) to reapply later\n      this.storeShortenSymbol(sValue);\n\n      // Ensures localization of the number to ensure comma and decimal separators are correct\n      sValue = this.decimalPipe.transform(parseFloat(sValue), '1.0-' + options.digits);\n\n      // Replaces the previously stored shortening symbol\n      sValue = this.replaceShortenSymbol(sValue);\n    }\n\n    // Returns the formatted value\n    return sValue;\n  }\n\n  // Stores the symbol added from shortening (K/M/B/T) to reapply later\n  private storeShortenSymbol(sValue: string) {\n    let rx = /K|M|B|T/ig;\n    if (sValue.match(rx)) {\n      this.shortSymbol = sValue.match(rx).toString();\n    }\n  }\n\n  // Must have previously called storeShortenSymbol to have something to replace.\n  // Finds the last number in the formatted number,\n  // gets the index of the position after that character and re-inserts the symbol.\n  // works regardless of currency symbol position\n  private replaceShortenSymbol(sValue: string) {\n    let r = /(\\d)(?!.*\\d)/g.exec(sValue);\n    let pos = r.index + r.length;\n    sValue = sValue.substring(0, pos)\n      + this.shortSymbol + sValue.substring(pos);\n    return sValue;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CurrencyPipe, },\n{type: DecimalPipe, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}