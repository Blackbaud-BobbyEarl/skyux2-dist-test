{"version":3,"sources":["../../../.srctemp/modules/fileattachments/file-size.pipe.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,IAAI,EAEL,MAAM,eAAA,CAAgB;AAEvB,OAAO,EACL,WAAW,EACZ,MAAM,iBAAA,CAAkB;AAEzB,OAAO,EACL,SAAS,EACV,MAAM,WAAA,CAAY;AAEnB,OAAO,EACL,YAAY,EACb,MAAM,cAAA,CAAe;AAGtB;IAEE,yBAA2B,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAG,CAAC;IAEhD,mCAAS,GAAhB,UAAiB,KAAa;QAE5B,IAAI,aAAa,GAAG,CAAC,EACT,QAAQ,GAAG,CAAC,EACZ,aAAqB,EACrB,WAAmB,EACnB,QAAgB,CAAC;QAE7B,oBAAoB;QACpB,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;QACD,mBAAmB;QAEnB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC1B,QAAQ,GAAG,YAAY,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;QAC5D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;YACxB,QAAQ,GAAG,YAAY,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;QAC1D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC;YACvB,QAAQ,GAAG,YAAY,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAClD,QAAQ,GAAG,IAAI,CAAC;QAClB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC;YACvB,QAAQ,GAAG,YAAY,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAClD,QAAQ,GAAG,GAAG,CAAC;YACf,aAAa,GAAG,CAAC,CAAC;QACpB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,QAAQ,GAAG,YAAY,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAClD,QAAQ,GAAG,GAAG,CAAC;YACf,aAAa,GAAG,CAAC,CAAC;QACpB,CAAC;QAED,WAAW;YACT,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;QAE7F,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAEhE,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IACvD,CAAC;IAUH,sBAAC;AAAD,CAnDA,AAmDC;;AATM,0BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;gBACnB,IAAI,EAAE,aAAa;aACpB,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,8BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,WAAW,GAAG;CACpB,EAF6F,CAE7F,CAAC","file":"file-size.pipe.js","sourceRoot":"","sourcesContent":["import {\n  Pipe,\n  PipeTransform\n} from '@angular/core';\n\nimport {\n  DecimalPipe\n} from '@angular/common';\n\nimport {\n  SkyFormat\n} from '../format';\n\nimport {\n  SkyResources\n} from '../resources';\n\n\nexport class SkyFileSizePipe implements PipeTransform {\n\n  public constructor(private decimalPipe: DecimalPipe) {}\n\n  public transform(input: number): string {\n\n    let decimalPlaces = 0,\n                dividend = 1,\n                formattedSize: string,\n                roundedSize: number,\n                template: string;\n\n    /* tslint:disable */\n    if (input === null || input === undefined) {\n        return '';\n    }\n    /* tslint:enable */\n\n    if (Math.abs(input) === 1) {\n      template = SkyResources.getString('file_size_b_singular');\n    } else if (input < 1000) {\n      template = SkyResources.getString('file_size_b_plural');\n    } else if (input < 1e6) {\n      template = SkyResources.getString('file_size_kb');\n      dividend = 1000;\n    } else if (input < 1e9) {\n      template = SkyResources.getString('file_size_mb');\n      dividend = 1e6;\n      decimalPlaces = 1;\n    } else {\n      template = SkyResources.getString('file_size_gb');\n      dividend = 1e9;\n      decimalPlaces = 1;\n    }\n\n    roundedSize =\n      Math.floor(input / (dividend / Math.pow(10, decimalPlaces))) / Math.pow(10, decimalPlaces);\n\n    formattedSize = this.decimalPipe.transform(roundedSize, '.0-3');\n\n    return SkyFormat.formatText(template, formattedSize);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'skyFileSize'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DecimalPipe, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}