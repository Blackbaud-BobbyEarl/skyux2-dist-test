{"version":3,"sources":["../../../../../.srctemp/modules/list/state/items/items.orchestrator.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAC;AAC9D,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAEnD,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEjC,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAC7C,OAAO,EACL,yBAAyB,EAAE,mBAAmB,EAC/C,MAAM,WAAW,CAAC;AAEnB;IAA2C,yCAA+C;IACxF,0BAA0B;IAC1B;QAAA,YACE,iBAAO,SAKR;QAHC,KAAI;aACD,QAAQ,CAAC,yBAAyB,EAAE,KAAI,CAAC,UAAU,CAAC;aACpD,QAAQ,CAAC,mBAAmB,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;;IAC9C,CAAC;IAEO,0CAAU,GAAlB,UACE,KAA+B,EAC/B,MAAiC;QACjC,MAAM,CAAC,IAAI,SAAS,CAAgB,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;IAClG,CAAC;IAEO,oCAAI,GAAZ,UACE,KAA+B,EAC/B,MAA2B;QAC3B,IAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,aAAa,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,EAA/B,CAA+B,CAAC,CAAC;QAC5E,IAAM,WAAW,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,GAAO,YAAY,WAAQ,KAAK,CAAC,KAAK,QAAK,YAAY,CAAC,CAAC;QAE7F,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,KAAK,SAAS,GAAG,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC;QAC3E,MAAM,CAAC,IAAI,SAAS,CAClB,WAAW,EACX,MAAM,CAAC,WAAW,GAAG,MAAM,EAAE,GAAG,KAAK,CAAC,UAAU,EAChD,KAAK,EACL,KAAK,CACN,CAAC;IACJ,CAAC;IACH,4BAAC;AAAD,CA9BA,AA8BC,CA9B0C,qBAAqB,GA8B/D","file":"items.orchestrator.js","sourceRoot":"","sourcesContent":["import { ListStateOrchestrator } from '../list-state.rxstate';\nimport { AsyncList } from 'microedge-rxstate/dist';\n\nconst moment = require('moment');\n\nimport { ListItemModel } from './item.model';\nimport {\n  ListItemsSetLoadingAction, ListItemsLoadAction\n} from './actions';\n\nexport class ListItemsOrchestrator extends ListStateOrchestrator<AsyncList<ListItemModel>> {\n  /* istanbul ignore next */\n  constructor() {\n    super();\n\n    this\n      .register(ListItemsSetLoadingAction, this.setLoading)\n      .register(ListItemsLoadAction, this.load);\n  }\n\n  private setLoading(\n    state: AsyncList<ListItemModel>,\n    action: ListItemsSetLoadingAction): AsyncList<ListItemModel> {\n    return new AsyncList<ListItemModel>(state.items, state.lastUpdate, action.loading, state.count);\n  }\n\n  private load(\n    state: AsyncList<ListItemModel>,\n    action: ListItemsLoadAction): AsyncList<ListItemModel> {\n    const newListItems = action.items.map(g => new ListItemModel(g.id, g.data));\n    const resultItems = (action.refresh) ? [...newListItems] : [...state.items, ...newListItems];\n\n    let count = action.count === undefined ? resultItems.length : action.count;\n    return new AsyncList<ListItemModel>(\n      resultItems,\n      action.dataChanged ? moment() : state.lastUpdate,\n      false,\n      count\n    );\n  }\n}\n"]}