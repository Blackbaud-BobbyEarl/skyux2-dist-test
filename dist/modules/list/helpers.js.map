{"version":3,"sources":["../../../.srctemp/modules/list/helpers.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,YAAY,IAAI,gBAAgB,EAAC,MAAM,wBAAwB,CAAC;AAExE,MAAM,kBAAkB,IAAS,EAAE,QAAgB;IACjD,IAAI,gBAAgB,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC3C,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,IAAI,gBAAgB,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC9D,gBAAgB,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAED,IAAI,MAAM,GAAG,IAAI,CAAC;IAClB,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAChC,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,gBAAgB,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC;YAC/D,IAAI,IAAI,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;YACjC,oCAAoC;YACpC,0BAA0B;YAC1B,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;gBACxD,MAAM,GAAG,IAAI,CAAC;gBACd,KAAK,CAAC;YACR,CAAC;YACD,mCAAmC;YAEnC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QACxB,CAAC;IACH,CAAC;IAED,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,kBAAkB,MAAW,EAAE,MAAW;IAC9C,oCAAoC;IACpC,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,CAAC,CAAC;IACX,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IACD,mCAAmC;IAEnC,EAAE,CAAC,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;QACzC,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;IAChC,CAAC;IAED,EAAE,CAAC,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;QACzC,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;IAChC,CAAC;IACD,EAAE,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;QACtB,MAAM,CAAC,CAAC,CAAC;IACX,CAAC;IAED,MAAM,CAAC,MAAM,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAClC,CAAC;AAED;;;EAGE;AACF,MAAM,uBAAuB,GAA0B;IACrD,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;AAC1C,CAAC","file":"helpers.js","sourceRoot":"","sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport {$$observable as symbolObservable} from 'rxjs/symbol/observable';\n\nexport function getData(item: any, selector: string): any {\n  let resultFieldParts = selector.split('.');\n  if (resultFieldParts.length > 0 && resultFieldParts[0] === '') {\n    resultFieldParts.shift();\n  }\n\n  let result = item;\n  if (resultFieldParts.length > 0) {\n    for (let index = 0; index < resultFieldParts.length; index++) {\n    let part = resultFieldParts[index];\n      /* tslint:disable:no-null-keyword */\n      /* istanbul ignore else */\n      if (result[part] === null || result[part] === undefined) {\n        result = null;\n        break;\n      }\n      /* tslint:enable:no-null-keyword */\n\n      result = result[part];\n    }\n  }\n\n  if (result === item) {\n    return undefined;\n  }\n\n  return result;\n}\n\nexport function compare(value1: any, value2: any) {\n  /* tslint:disable:no-null-keyword */\n  if (value1 === null) {\n    return 1;\n  } else if (value2 === null) {\n    return -1;\n  }\n  /* tslint:enable:no-null-keyword */\n\n  if (value1 && typeof value1 === 'string') {\n    value1 = value1.toLowerCase();\n  }\n\n  if (value2 && typeof value2 === 'string') {\n    value2 = value2.toLowerCase();\n  }\n  if (value1 === value2) {\n    return 0;\n  }\n\n  return value1 > value2 ? 1 : -1;\n}\n\n/*\n  Taken from @angular's internal library to determine whether an object is an Obserable.\n  https://github.com/angular/angular/commit/109f0d1\n*/\nexport function isObservable(obj: any | Observable<any>): obj is Observable<any> {\n  return !!(obj && obj[symbolObservable]);\n}\n"]}