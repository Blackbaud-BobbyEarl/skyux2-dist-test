{"version":3,"sources":["../../../.srctemp/modules/list-column-selector-action/list-column-selector-action.component.ts"],"names":[],"mappings":"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","file":"list-column-selector-action.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  Input\n } from '@angular/core';\nimport {\n  ListState\n} from '../list/state';\nimport {\n  SkyListViewGridComponent\n} from '../list-view-grid';\nimport {\n  GridStateModel\n} from '../list-view-grid/state';\nimport {\n  ListViewDisplayedGridColumnsLoadAction\n} from '../list-view-grid/state/displayed-columns/actions';\nimport {\n  SkyGridColumnModel\n} from '../grid';\nimport {\n  SkyModalService,\n  SkyModalCloseArgs\n} from '../modal';\nimport {\n  SkyColumnSelectorContext,\n  SkyColumnSelectorModel,\n  SkyColumnSelectorComponent\n} from '../column-selector';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/take';\n\n\nexport class SkyListColumnSelectorActionComponent {\n  \n  public gridView: SkyListViewGridComponent;\n\n  constructor(\n    public listState: ListState,\n    private modalService: SkyModalService\n  ) {}\n\n  get isInGridView(): Observable<boolean> {\n    return this.listState.map(s => s.views.active).map((activeView) => {\n      return this.gridView && (activeView === this.gridView.id) ;\n    }).distinctUntilChanged();\n  }\n\n  public openColumnSelector() {\n    /* istanbul ignore else */\n    /* sanity check */\n    if (this.gridView) {\n      let columns: Array<SkyColumnSelectorModel> = [];\n      let selectedColumnIds: Array<string> = [];\n      this.gridView.gridState.take(1).subscribe((state: GridStateModel) => {\n        columns = state.columns.items\n          .filter((item: SkyGridColumnModel) => {\n            return !item.locked;\n          })\n          .map((item: SkyGridColumnModel) => {\n            return {\n              id: item.id,\n              heading: item.heading,\n              description: item.description\n            };\n          });\n        selectedColumnIds = state.displayedColumns.items\n          .filter((item: SkyGridColumnModel) => {\n            return !item.locked;\n          })\n          .map((item: SkyGridColumnModel) => {\n            return item.id;\n          });\n      });\n\n      let modalInstance = this.modalService.open(\n        SkyColumnSelectorComponent,\n        [\n          {\n            provide: SkyColumnSelectorContext,\n            useValue: {\n              columns: columns,\n              selectedColumnIds: selectedColumnIds\n            }\n          }\n        ]\n      );\n\n      modalInstance.closed.subscribe((result: SkyModalCloseArgs) => {\n        if (result.reason === 'save' && result.data) {\n          let newSelectedIds = result.data;\n          let newDisplayedColumns: Array<SkyGridColumnModel> = [];\n          this.gridView.gridState.take(1)\n            .subscribe((state: GridStateModel) => {\n              newDisplayedColumns = state.columns.items.filter((item) => {\n                return newSelectedIds.indexOf(item.id) > -1 || item.locked;\n              });\n            });\n          this.gridView.gridDispatcher.next(\n            new ListViewDisplayedGridColumnsLoadAction(\n             newDisplayedColumns,\n            true)\n          );\n        }\n      });\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sky-list-column-selector-action',\n  template: `<sky-list-secondary-action *ngIf=\"isInGridView | async\">\n  <button type=\"button\" (click)=\"openColumnSelector()\">\n    Choose columns\n  </button>\n</sky-list-secondary-action>\n`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ListState, },\n{type: SkyModalService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'gridView': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}