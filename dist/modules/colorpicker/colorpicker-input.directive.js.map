{"version":3,"sources":["../../../.srctemp/modules/colorpicker/colorpicker-input.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,UAAU,EACV,SAAS,EACT,UAAU,EACV,YAAY,EACZ,KAAK,EAGL,QAAQ,EAGT,MAAM,eAAA,CAAgB;AAEvB,OAAO,EAGL,aAAa,EACb,iBAAiB,EAElB,MAAM,gBAAA,CAAiB;AAExB,OAAO,EAAE,qBAAA,EAAsB,MAAO,uBAAA,CAAwB;AAU9D,sDAAsD;AACtD,IAAM,8BAAA,GAAiC;IACrC,OAAO,EAAE,iBAAA;IACT,WAAW,EAAE,UAAA,CAAW,cAAM,OAAA,4BAAA,EAAA,CAAA,CAA6B;IAC3D,KAAK,EAAE,IAAA;CACR,CAAC;AAEF,IAAM,yBAAA,GAA4B;IAChC,OAAO,EAAE,aAAA;IACT,WAAW,EAAE,UAAA,CAAW,cAAM,OAAA,4BAAA,EAAA,CAAA,CAA6B;IAC3D,KAAK,EAAE,IAAA;CACR,CAAC;AACF,gBAAgB;AAEhB,IAAM,6BAAA,GAAgC,SAAA,CAAU;AAGhD;IAgCE,sCACU,UAAsB,EACtB,QAAkB,EAClB,OAA8B;QAF9B,eAAU,GAAV,UAAU,CAAY;QACtB,aAAQ,GAAR,QAAQ,CAAU;QAClB,YAAO,GAAP,OAAO,CAAuB;QAjBjC,iBAAY,GAAG,MAAM,CAAC;QAGtB,iBAAY,GAAG,MAAM,CAAC;QAGtB,iBAAY,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAGnD,iBAAY,GAAG,MAAM,CAAC;QAErB,kBAAa,GAAG,6BAA6B,CAAC;QAyItD,yBAAyB;QACjB,cAAS,GAAG,UAAC,CAAM,IAAO,CAAC,CAAC;QACpC,yBAAyB;QACjB,eAAU,GAAG,cAAQ,CAAC,CAAC;QACvB,qBAAgB,GAAG,cAAQ,CAAC,CAAC;IAtIjC,CAAC;IA3BL,sBAAW,sDAAY;aAIvB;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;aAND,UAAwB,KAAa;YACnC,IAAI,CAAC,aAAa,GAAG,KAAK,IAAI,6BAA6B,CAAC;QAC9D,CAAC;;;OAAA;IA4BM,kDAAW,GAAlB,UAAmB,KAAU;QAC3B,IAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACrD,CAAC;IAGM,+CAAQ,GAAf,UAAgB,KAAU;QACxB,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAChC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACxC,CAAC;IAGM,6CAAM,GAAb,UAAc,KAAU;QACtB,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEM,+CAAQ,GAAf;QAAA,iBAqBC;QApBC,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QAE9C,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAAC;QACjE,IAAI,CAAC,mBAAmB,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QAC1D,IAAI,CAAC,mBAAmB,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QAE1D,IAAI,CAAC,yBAAyB;YAC5B,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,SAAS,CAAC,UAAC,QAA8B;gBACrF,KAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAC1B,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAEjE,IAAM,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC9C,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,mBAAmB,CAAC,SAAS,GAAG,KAAK,CAAC;QAC7C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,mBAAmB,CAAC,SAAS,GAAG,IAAI,CAAC;QAC5C,CAAC;IACH,CAAC;IAEM,kDAAW,GAAlB;QACE,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,CAAC;IAC/C,CAAC;IAEM,6DAAsB,GAA7B;QACE,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAChC,IAAI,EACJ,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,YAAY,CAClB,CAAC;IACJ,CAAC;IAEM,kDAAW,GAAlB,UAAmB,OAAsB;QACvC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,mBAAmB,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QAC1D,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;IAEM,uDAAgB,GAAvB,UAAwB,EAAuB,IAAU,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC;IACxE,wDAAiB,GAAxB,UAAyB,EAAa,IAAU,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,CAAC,CAAC;IAChE,gEAAyB,GAAhC,UAAiC,EAAc,IAAU,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC,CAAC,CAAC;IAE/E,iDAAU,GAAjB,UAAkB,KAAU;QAC1B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACxC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;IAEM,+CAAQ,GAAf,UAAgB,OAAwB;QACtC,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC1B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,MAAM,CAAC;QACT,CAAC;QACD,aAAa;IACf,CAAC;IAEO,sDAAe,GAAvB,UAAwB,KAA2B;QACjD,IAAM,eAAe,GAAG,KAAK,CAAC,QAAQ,CAAC;QACvC,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QAE9C,IAAI,MAAc,CAAC;QACnB,0CAA0C;QAC1C,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YAC1B,KAAK,MAAM;gBACX,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC;gBACxB,KAAK,CAAC;YAEN,KAAK,MAAM;gBACX,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC;gBACxB,KAAK,CAAC;YAEN,KAAK,MAAM;gBACX,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC;gBACxB,KAAK,CAAC;YAEN,KAAK,KAAK;gBACV,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC;gBACnB,KAAK,CAAC;QACR,CAAC;QAED,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAEpD,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,EAAE,kBAAkB,EAAE,eAAe,CAAC,CAAC;QAC5E,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAC3D,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,EAAE,uBAAuB,EAAE,IAAI,CAAC,CAAC;IACxE,CAAC;IAEO,gDAAS,GAAjB,UAAkB,KAAU;QAC1B,EAAE,CAAC,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,IAAI,WAAiC,CAAC;QACtC,IAAI,IAAI,GAAuB,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,KAAK,MAAM,CAAC,CAAC;QAE9F,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAEnD,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;IAiCH,mCAAC;AAAD,CArMA,AAqMC;;AA1BM,uCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,uBAAuB;gBACjC,SAAS,EAAE;oBACT,8BAA8B;oBAC9B,yBAAyB;iBAC1B;aACF,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,2CAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,QAAQ,GAAG;IAClB,EAAC,IAAI,EAAE,qBAAqB,GAAG;CAC9B,EAJ6F,CAI7F,CAAC;AACK,2CAAc,GAA2C;IAChE,qBAAqB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACzC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAClC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAClC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAClC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAClC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAClC,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAG,EAAE,EAAE;IACvE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,EAAG,EAAE,EAAE;IACrE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,MAAM,EAAG,EAAE,EAAE;CACpD,CAAC","file":"colorpicker-input.directive.js","sourceRoot":"","sourcesContent":["import {\n  ElementRef,\n  Directive,\n  forwardRef,\n  HostListener,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer,\n  SimpleChanges,\n  OnDestroy\n} from '@angular/core';\n\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  Validator\n} from '@angular/forms';\n\nimport { SkyColorpickerService } from './colorpicker.service';\nimport { SkyColorpickerComponent } from './colorpicker.component';\n\nimport {\n  SkyColorpickerHsva,\n  SkyColorpickerOutput\n} from './types';\n\nimport { Subscription } from 'rxjs/Subscription';\n\n// tslint:disable:no-forward-ref no-use-before-declare\nconst SKY_COLORPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SkyColorpickerInputDirective),\n  multi: true\n};\n\nconst SKY_COLORPICKER_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => SkyColorpickerInputDirective),\n  multi: true\n};\n// tslint:enable\n\nconst SKY_COLORPICKER_DEFAULT_COLOR = '#FFFFFF';\n\n\nexport class SkyColorpickerInputDirective\n  implements OnInit, OnChanges, ControlValueAccessor, Validator, OnDestroy {\n\n  public pickerChangedSubscription: Subscription;\n\n  \n  public skyColorpickerInput: SkyColorpickerComponent;\n\n  \n  public set initialColor(value: string) {\n    this._initialColor = value || SKY_COLORPICKER_DEFAULT_COLOR;\n  }\n\n  public get initialColor(): string {\n    return this._initialColor;\n  }\n\n  \n  public returnFormat = 'rgba';\n\n  \n  public outputFormat = 'rgba';\n\n  \n  public presetColors = ['#333', '#888', '#EFEFEF', '#FFF'];\n\n  \n  public alphaChannel = 'hex6';\n\n  private _initialColor = SKY_COLORPICKER_DEFAULT_COLOR;\n  private modelValue: SkyColorpickerOutput;\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer,\n    private service: SkyColorpickerService\n  ) { }\n\n  \n  public changeInput(event: any) {\n    const value = event.target.value;\n    this.skyColorpickerInput.setColorFromString(value);\n  }\n\n  \n  public onChange(event: any) {\n    const newValue = event.target.value;\n    this.modelValue = this.formatter(newValue);\n    this._validatorChange();\n    this._onChange(this.modelValue);\n    this.writeModelValue(this.modelValue);\n  }\n\n  \n  public onBlur(event: any) {\n    this._onTouched();\n  }\n\n  public ngOnInit() {\n    const element = this.elementRef.nativeElement;\n\n    this.renderer.setElementClass(element, 'sky-form-control', true);\n    this.skyColorpickerInput.initialColor = this.initialColor;\n    this.skyColorpickerInput.returnFormat = this.returnFormat;\n\n    this.pickerChangedSubscription =\n      this.skyColorpickerInput.selectedColorChanged.subscribe((newColor: SkyColorpickerOutput) => {\n        this.writeValue(newColor);\n        this._onChange(newColor);\n      });\n\n      this.skyColorpickerInput.setColorFromString(this.initialColor);\n\n    const typeAttr = element.getAttribute('type');\n    if (typeAttr && typeAttr === 'hidden') {\n      this.skyColorpickerInput.isVisible = false;\n    } else {\n      this.skyColorpickerInput.isVisible = true;\n    }\n  }\n\n  public ngOnDestroy() {\n    this.pickerChangedSubscription.unsubscribe();\n  }\n\n  public setColorPickerDefaults() {\n    this.skyColorpickerInput.setDialog(\n      this,\n      this.elementRef,\n      this.initialColor,\n      this.outputFormat,\n      this.presetColors,\n      this.alphaChannel\n    );\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    this._validatorChange();\n    this.skyColorpickerInput.returnFormat = this.returnFormat;\n    this.setColorPickerDefaults();\n  }\n\n  public registerOnChange(fn: (value: any) => any): void { this._onChange = fn; }\n  public registerOnTouched(fn: () => any): void { this._onTouched = fn; }\n  public registerOnValidatorChange(fn: () => void): void { this._validatorChange = fn; }\n\n  public writeValue(value: any) {\n    if (value) {\n      this.modelValue = this.formatter(value);\n      this.writeModelValue(this.modelValue);\n    }\n  }\n\n  public validate(control: AbstractControl): {[key: string]: any} {\n    let value = control.value;\n    if (!value) {\n      return;\n    }\n    // Validation\n  }\n\n  private writeModelValue(model: SkyColorpickerOutput) {\n    const setElementValue = model.rgbaText;\n    const element = this.elementRef.nativeElement;\n\n    let output: string;\n    // tslint:disable-next-line:switch-default\n    switch (this.outputFormat) {\n      case 'rgba':\n      output = model.rgbaText;\n      break;\n\n      case 'hsla':\n      output = model.hslaText;\n      break;\n\n      case 'cmyk':\n      output = model.cmykText;\n      break;\n\n      case 'hex':\n      output = model.hex;\n      break;\n    }\n\n    this.skyColorpickerInput.setColorFromString(output);\n\n    this.renderer.setElementStyle(element, 'background-color', setElementValue);\n    this.renderer.setElementStyle(element, 'color', setElementValue);\n    this.renderer.setElementProperty(element, 'value', output);\n    this.renderer.setElementClass(element, 'sky-colorpicker-input', true);\n  }\n\n  private formatter(color: any) {\n    if (color && typeof color !== 'string') {\n      return color;\n    }\n\n    let formatColor: SkyColorpickerOutput;\n    let hsva: SkyColorpickerHsva = this.service.stringToHsva(color, this.alphaChannel === 'hex8');\n\n    formatColor = this.service.skyColorpickerOut(hsva);\n\n    return formatColor;\n  }\n\n  /*istanbul ignore next */\n  private _onChange = (_: any) => { };\n  /*istanbul ignore next */\n  private _onTouched = () => { };\n  private _validatorChange = () => { };\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[skyColorpickerInput]',\n  providers: [\n    SKY_COLORPICKER_VALUE_ACCESSOR,\n    SKY_COLORPICKER_VALIDATOR\n  ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: SkyColorpickerService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'skyColorpickerInput': [{ type: Input },],\n'initialColor': [{ type: Input },],\n'returnFormat': [{ type: Input },],\n'outputFormat': [{ type: Input },],\n'presetColors': [{ type: Input },],\n'alphaChannel': [{ type: Input },],\n'changeInput': [{ type: HostListener, args: ['input', ['$event'], ] },],\n'onChange': [{ type: HostListener, args: ['change', ['$event'], ] },],\n'onBlur': [{ type: HostListener, args: ['blur', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}