{"version":3,"sources":["../../../.srctemp/modules/colorpicker/colorpicker-text.directive.ts"],"names":[],"mappings":"AAAA,mCAAC;AACD,OAAO,EACL,SAAS,EACT,KAAK,EACL,MAAM,EACN,YAAY,EACZ,YAAY,EACb,MAAM,eAAA,CAAgB;AAKvB;IAAA;QAES,qBAAgB,GAAG,IAAI,YAAY,EAA6B,CAAC;IA2C1E,CAAC;IAlCQ,iDAAW,GAAlB,UAAmB,KAAY;QAC7B,IAAI,OAAO,GAAuC,KAAK,CAAC,MAAM,CAAC;QAC/D,IAAI,YAAY,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;gBACzB,KAAK,EAAE,OAAO,CAAC,KAAK;gBACpB,UAAU,EAAE,SAAS;gBACrB,QAAQ,EAAE,SAAS;aACS,CAAC,CAAC;QAClC,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,YAAY,IAAI,CAAC,IAAI,YAAY,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC/E,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;gBACzB,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,UAAU,EAAE,YAAY;gBACxB,QAAQ,EAAE,IAAI,CAAC,QAAQ;aACK,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAgBH,kCAAC;AAAD,CA7CA,AA6CC;;AAfM,sCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,sBAAsB;aACjC,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,0CAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AACK,0CAAc,GAA2C;IAChE,kBAAkB,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;IACvC,oBAAoB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACxC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC3B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC9B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAG,EAAE,EAAE;CACtE,CAAC","file":"colorpicker-text.directive.js","sourceRoot":"","sourcesContent":["// spell-checker:ignore Colorpicker\nimport {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener\n} from '@angular/core';\n\nimport { SkyColorpickerChangeColor } from './types/colorpicker-color';\n\n\nexport class SkyColorpickerTextDirective {\n  \n  public newColorContrast = new EventEmitter<SkyColorpickerChangeColor>();\n  \n  public skyColorpickerText: any;\n  \n  public color: string;\n  \n  public maxRange: number;\n\n  \n  public changeInput(event: Event) {\n    let element: HTMLInputElement = <HTMLInputElement>event.target;\n    let elementValue = parseFloat(element.value);\n    if (this.maxRange === undefined) {\n      this.newColorContrast.emit({\n        color: element.value,\n        colorValue: undefined,\n        maxRange: undefined\n      } as SkyColorpickerChangeColor);\n    }\n\n    if (!isNaN(elementValue) && elementValue >= 0 && elementValue <= this.maxRange) {\n      this.newColorContrast.emit({\n        color: this.color,\n        colorValue: elementValue,\n        maxRange: this.maxRange\n      } as SkyColorpickerChangeColor);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[skyColorpickerText]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'newColorContrast': [{ type: Output },],\n'skyColorpickerText': [{ type: Input },],\n'color': [{ type: Input },],\n'maxRange': [{ type: Input },],\n'changeInput': [{ type: HostListener, args: ['input', ['$event'], ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}