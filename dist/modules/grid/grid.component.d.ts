import { OnDestroy, AfterContentInit, ChangeDetectorRef, SimpleChanges, EventEmitter, OnChanges } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/take';
import { DragulaService } from 'ng2-dragula/ng2-dragula';
import { ListSortFieldSelectorModel } from '../list/state';
import { SkyGridColumnModel } from './grid-column.model';
import { SkyGridAdapterService } from './grid-adapter.service';
import { SkyGridColumnHeadingModelChange } from './types';
export declare class SkyGridComponent implements AfterContentInit, OnChanges, OnDestroy {
    private dragulaService;
    private ref;
    private gridAdapter;
    selectedColumnIds: Array<string>;
    fit: string;
    width: number;
    height: number;
    data: Array<any>;
    columns: Array<SkyGridColumnModel>;
    hasToolbar: boolean;
    sortField: ListSortFieldSelectorModel;
    selectedColumnIdsChange: EventEmitter<string[]>;
    sortFieldChange: EventEmitter<ListSortFieldSelectorModel>;
    items: Array<any>;
    displayedColumns: Array<SkyGridColumnModel>;
    currentSortField: BehaviorSubject<ListSortFieldSelectorModel>;
    private columnComponents;
    private subscriptions;
    constructor(dragulaService: DragulaService, ref: ChangeDetectorRef, gridAdapter: SkyGridAdapterService);
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    sortByColumn(column: SkyGridColumnModel): void;
    getSortDirection(columnField: string): Observable<string>;
    updateColumnHeading(change: SkyGridColumnHeadingModelChange): void;
    private onHeaderDrop(newColumnIds);
    private setDisplayedColumns(respectHidden?);
    private transformData();
    private setSortHeaders();
    private getColumnsFromComponent();
    private updateColumns();
}
