{"version":3,"sources":["../../../.srctemp/modules/grid/grid.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,KAAK,EAEL,MAAM,EACN,eAAe,EAEf,uBAAuB,EAEvB,iBAAiB,EAEjB,YAAY,EAEb,MAAM,eAAA,CAAgB;AAGvB,OAAO,EAAE,eAAA,EAAgB,MAAO,sBAAA,CAAuB;AAEvD,OAAO,wCAAA,CAAyC;AAChD,OAAO,uBAAA,CAAwB;AAC/B,OAAO,wBAAA,CAAyB;AAEhC,OAAO,EAAE,cAAA,EAAe,MAAO,yBAAA,CAA0B;AAEzD,OAAO,EACL,aAAa,EAEd,MAAM,eAAA,CAAgB;AAEvB,OAAO,EAAE,sBAAA,EAAuB,MAAO,yBAAA,CAA0B;AACjE,OAAO,EAAE,kBAAA,EAAmB,MAAO,qBAAA,CAAsB;AACzD,OAAO,EAAE,qBAAA,EAAsB,MAAO,wBAAA,CAAyB;AAO/D;IAwCE,0BACU,cAA8B,EAC9B,GAAsB,EACtB,WAAkC;QAFlC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,QAAG,GAAH,GAAG,CAAmB;QACtB,gBAAW,GAAX,WAAW,CAAuB;QAtCrC,QAAG,GAAW,OAAO,CAAC;QAetB,eAAU,GAAY,KAAK,CAAC;QAM5B,4BAAuB,GAAG,IAAI,YAAY,EAAiB,CAAC;QAG5D,oBAAe,GAAG,IAAI,YAAY,EAA8B,CAAC;QAShE,kBAAa,GAAmB,EAAE,CAAC;QAOzC,IAAI,CAAC,gBAAgB,GAAG,IAAI,KAAK,EAAsB,CAAC;QACxD,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAO,CAAC;QAC9B,IAAI,CAAC,gBAAgB,GAAG,IAAI,eAAe,CAA6B;YACtE,aAAa,EAAE,EAAE;YACjB,UAAU,EAAE,KAAK;SAClB,CAAC,CAAC;IACL,CAAC;IAEM,6CAAkB,GAAzB;QAAA,iBAiCC;QAhCC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;YACrE,0BAA0B;YAC1B,kBAAkB;YAClB,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACrC,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACjC,CAAC;YAED,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;QAED,mCAAmC;QACnC,IAAI,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,aAAa,EAAE,EAApB,CAAoB,CAAC,CACpE,CAAC;QAEF,oCAAoC;QACpC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAC,IAA4B;YACzD,KAAI,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,CAAC,mBAAmB;iBACrB,SAAS,CAAC,UAAC,MAAuC;gBACjD,KAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;YACnC,CAAC,CAAC,CACL,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,CAAC,qBAAqB,CACpC,IAAI,CAAC,cAAc,EACnB,UAAC,iBAAgC;YAC/B,KAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;QACvC,CAAC,CACF,CAAC;IACJ,CAAC;IAED,4EAA4E;IACrE,sCAAW,GAAlB,UAAmB,OAAsB;QACvC,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC7B,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;IACH,CAAC;IAEM,sCAAW,GAAlB;QACE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAC,YAA0B;YACpD,YAAY,CAAC,WAAW,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,uCAAY,GAAnB,UAAoB,MAA0B;QAA9C,iBAqBC;QApBC,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,gBAAgB;iBACpB,IAAI,CAAC,CAAC,CAAC;iBACP,GAAG,CAAC,UAAA,KAAK;gBACR,IAAI,QAAQ,GAAG;oBACb,aAAa,EAAE,MAAM,CAAC,KAAK;oBAC3B,UAAU,EAAE,IAAI;iBACjB,CAAC;gBAEF,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,aAAa,KAAK,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;oBACtE,QAAQ,GAAG;wBACT,aAAa,EAAE,MAAM,CAAC,KAAK;wBAC3B,UAAU,EAAE,KAAK;qBAClB,CAAC;gBACJ,CAAC;gBACD,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACpC,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACvC,CAAC,CAAC;iBACD,SAAS,EAAE,CAAC;QACf,CAAC;IACH,CAAC;IAEM,2CAAgB,GAAvB,UAAwB,WAAmB;QACzC,MAAM,CAAC,IAAI,CAAC,gBAAgB;aACzB,oBAAoB,EAAE;aACtB,GAAG,CAAC,UAAA,KAAK;YACR,MAAM,CAAC,KAAK,CAAC,aAAa,KAAK,WAAW;gBACxC,CAAC,KAAK,CAAC,UAAU,GAAG,MAAM,GAAG,KAAK,CAAC,GAAG,SAAS,CAAC;QACpD,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,8CAAmB,GAA1B,UAA2B,MAAuC;QAChE,IAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAC,MAA0B;YACpE,MAAM,CAAC,CACL,MAAM,CAAC,EAAE,KAAK,SAAS,IAAI,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE;gBAClD,MAAM,CAAC,KAAK,KAAK,SAAS,IAAI,MAAM,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,CAC5D,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,0BAA0B;QAC1B,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACrB,gBAAgB,CAAC,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC;YACxC,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;QAC1B,CAAC;IACH,CAAC;IAEO,uCAAY,GAApB,UAAqB,YAA2B;QAAhD,iBAYC;QAXC,4BAA4B;QAC5B,IAAI,CAAC,iBAAiB,GAAG,YAAY,CAAC;QACtC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAEhD,4BAA4B;QAC5B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAChD,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,EAAE,KAAK,QAAQ,EAAtB,CAAsB,CAAC,CAAC,CAAC,CAAC,EAAxD,CAAwD,CACrE,CAAC;QAEF,qEAAqE;QACrE,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IAC1B,CAAC;IAEO,8CAAmB,GAA3B,UAA4B,aAA8B;QAA1D,iBAaC;QAb2B,8BAAA,EAAA,qBAA8B;QACxD,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;YACzC,0BAA0B;YAC1B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAChD,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,EAAE,KAAK,QAAQ,EAAtB,CAAsB,CAAC,CAAC,CAAC,CAAC,EAAxD,CAAwD,CACrE,CAAC;QACJ,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM;gBAChD,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;YACxB,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC;QACvC,CAAC;IACH,CAAC;IAEO,wCAAa,GAArB;QACE,yDAAyD;QACzD,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAClE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,aAAa,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAhC,CAAgC,CAAC,CAAC;QACvE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;QACzB,CAAC;IACH,CAAC;IAEO,yCAAc,GAAtB;QACE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,EAAE,aAAa,EAAE,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;IACzF,CAAC;IAEO,kDAAuB,GAA/B;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAA,eAAe;YACtD,MAAM,CAAC,IAAI,kBAAkB,CAAC,eAAe,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,wCAAa,GAArB;QACE,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IAC1B,CAAC;IAkKH,uBAAC;AAAD,CApXA,AAoXC;;AAjKM,2BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,o+DAiDX;gBACC,MAAM,EAAE,CAAC,6iDAiFV,CAAC;gBACA,aAAa,EAAE,CAAE,cAAc,CAAE;gBACjC,SAAS,EAAE;oBACT,qBAAqB;iBACtB;gBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;aAChD,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,+BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,cAAc,GAAG;IACxB,EAAC,IAAI,EAAE,iBAAiB,GAAG;IAC3B,EAAC,IAAI,EAAE,qBAAqB,GAAG;CAC9B,EAJ6F,CAI7F,CAAC;AACK,+BAAc,GAA2C;IAChE,mBAAmB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACvC,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACzB,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC3B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC1B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7B,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAChC,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC/B,yBAAyB,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;IAC9C,iBAAiB,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;IACtC,kBAAkB,EAAE,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,sBAAsB,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,EAAG,EAAE,EAAE;CACxG,CAAC","file":"grid.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  Input,\n  OnDestroy,\n  Output,\n  ContentChildren,\n  QueryList,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  ChangeDetectorRef,\n  SimpleChanges,\n  EventEmitter,\n  OnChanges\n} from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/take';\n\nimport { DragulaService } from 'ng2-dragula/ng2-dragula';\n\nimport {\n  ListItemModel,\n  ListSortFieldSelectorModel\n} from '../list/state';\n\nimport { SkyGridColumnComponent } from './grid-column.component';\nimport { SkyGridColumnModel } from './grid-column.model';\nimport { SkyGridAdapterService } from './grid-adapter.service';\n\nimport {\n  SkyGridColumnHeadingModelChange\n} from './types';\n\n\nexport class SkyGridComponent implements AfterContentInit, OnChanges, OnDestroy {\n  \n  public selectedColumnIds: Array<string>;\n\n  \n  public fit: string = 'width';\n\n  \n  public width: number;\n\n  \n  public height: number;\n\n  \n  public data: Array<any>;\n\n  \n  public columns: Array<SkyGridColumnModel>;\n\n  \n  public hasToolbar: boolean = false;\n\n  \n  public sortField: ListSortFieldSelectorModel;\n\n  \n  public selectedColumnIdsChange = new EventEmitter<Array<string>>();\n\n  \n  public sortFieldChange = new EventEmitter<ListSortFieldSelectorModel>();\n\n  public items: Array<any>;\n  public displayedColumns: Array<SkyGridColumnModel>;\n  public currentSortField: BehaviorSubject<ListSortFieldSelectorModel>;\n\n  \n  private columnComponents: QueryList<SkyGridColumnComponent>;\n\n  private subscriptions: Subscription[] = [];\n\n  constructor(\n    private dragulaService: DragulaService,\n    private ref: ChangeDetectorRef,\n    private gridAdapter: SkyGridAdapterService\n  ) {\n    this.displayedColumns = new Array<SkyGridColumnModel>();\n    this.items = new Array<any>();\n    this.currentSortField = new BehaviorSubject<ListSortFieldSelectorModel>({\n      fieldSelector: '',\n      descending: false\n    });\n  }\n\n  public ngAfterContentInit() {\n    if (this.columnComponents.length !== 0 || this.columns !== undefined) {\n      /* istanbul ignore else */\n      /* sanity check */\n      if (this.columnComponents.length > 0) {\n        this.getColumnsFromComponent();\n      }\n\n      this.transformData();\n      this.setDisplayedColumns(true);\n    }\n\n    // Watch for added/removed columns:\n    this.subscriptions.push(\n      this.columnComponents.changes.subscribe(() => this.updateColumns())\n    );\n\n    // Watch for column heading changes:\n    this.columnComponents.forEach((comp: SkyGridColumnComponent) => {\n      this.subscriptions.push(\n        comp.headingModelChanges\n          .subscribe((change: SkyGridColumnHeadingModelChange) => {\n            this.updateColumnHeading(change);\n          })\n      );\n    });\n\n    this.gridAdapter.initializeDragAndDrop(\n      this.dragulaService,\n      (selectedColumnIds: Array<string>) => {\n        this.onHeaderDrop(selectedColumnIds);\n      }\n    );\n  }\n\n  // Do an ngOnChanges where changes to selectedColumnIds and data are watched\n  public ngOnChanges(changes: SimpleChanges) {\n    if (changes['columns'] && this.columns) {\n      this.setDisplayedColumns(true);\n    } else if (changes['selectedColumnIds'] && this.columns) {\n      this.setDisplayedColumns();\n    }\n\n    if (changes['data'] && this.data) {\n      this.transformData();\n    }\n\n    if (changes['sortField']) {\n      this.setSortHeaders();\n    }\n  }\n\n  public ngOnDestroy() {\n    this.subscriptions.forEach((subscription: Subscription) => {\n      subscription.unsubscribe();\n    });\n  }\n\n  public sortByColumn(column: SkyGridColumnModel) {\n    if (column.isSortable) {\n      this.currentSortField\n      .take(1)\n      .map(field => {\n        let selector = {\n          fieldSelector: column.field,\n          descending: true\n        };\n\n        if (field && field.fieldSelector === column.field && field.descending) {\n          selector = {\n            fieldSelector: column.field,\n            descending: false\n          };\n        }\n        this.sortFieldChange.emit(selector);\n        this.currentSortField.next(selector);\n      })\n      .subscribe();\n    }\n  }\n\n  public getSortDirection(columnField: string): Observable<string> {\n    return this.currentSortField\n      .distinctUntilChanged()\n      .map(field => {\n        return field.fieldSelector === columnField ?\n          (field.descending ? 'desc' : 'asc') : undefined;\n      });\n  }\n\n  public updateColumnHeading(change: SkyGridColumnHeadingModelChange) {\n    const foundColumnModel = this.columns.find((column: SkyGridColumnModel) => {\n      return (\n        change.id !== undefined && change.id === column.id ||\n        change.field !== undefined && change.field === column.field\n      );\n    });\n\n    /* istanbul ignore else */\n    if (foundColumnModel) {\n      foundColumnModel.heading = change.value;\n      this.ref.markForCheck();\n    }\n  }\n\n  private onHeaderDrop(newColumnIds: Array<string>) {\n    // update selected columnIds\n    this.selectedColumnIds = newColumnIds;\n    this.selectedColumnIdsChange.emit(newColumnIds);\n\n    // set new displayed columns\n    this.displayedColumns = this.selectedColumnIds.map(\n      columnId => this.columns.filter(column => column.id === columnId)[0]\n    );\n\n    // mark for check because we are using ChangeDetectionStrategy.onPush\n    this.ref.markForCheck();\n  }\n\n  private setDisplayedColumns(respectHidden: boolean = false) {\n    if (this.selectedColumnIds !== undefined) {\n      // setup displayed columns\n      this.displayedColumns = this.selectedColumnIds.map(\n        columnId => this.columns.filter(column => column.id === columnId)[0]\n      );\n    } else if (respectHidden) {\n      this.displayedColumns = this.columns.filter(column => {\n        return !column.hidden;\n      });\n    } else {\n      this.displayedColumns = this.columns;\n    }\n  }\n\n  private transformData() {\n    // Transform data into object with id and data properties\n    if (this.data.length > 0 && this.data[0].id && !this.data[0].data) {\n      this.items = this.data.map(item => new ListItemModel(item.id, item));\n    } else {\n      this.items = this.data;\n    }\n  }\n\n  private setSortHeaders() {\n    this.currentSortField.next(this.sortField || { fieldSelector: '', descending: false });\n  }\n\n  private getColumnsFromComponent() {\n    this.columns = this.columnComponents.map(columnComponent => {\n      return new SkyGridColumnModel(columnComponent.template, columnComponent);\n    });\n  }\n\n  private updateColumns() {\n    this.getColumnsFromComponent();\n    this.setDisplayedColumns(true);\n    this.ref.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sky-grid',\n  template: `<div class=\"sky-grid\">\n  <div class=\"sky-grid-table-container\" [style.height.px]=\"height\" [style.width.px]=\"width\">\n    <table\n      class=\"sky-grid-table\"\n      [ngClass]=\"{ 'sky-grid-fit': fit !== 'scroll', 'sky-grid-has-toolbar': hasToolbar }\">\n      <thead>\n        <tr dragula=\"sky-grid-heading\">\n          <th\n            scope=\"col\"\n            class=\"sky-grid-heading\"\n            *ngFor=\"let column of displayedColumns; let last = last\"\n            [style.width.px]=\"last ? null : column.width\"\n            [attr.sky-cmp-id]=\"column.id || column.field\"\n            [ngClass]=\"{ 'sky-grid-header-locked': column.locked }\"\n            (click)=\"sortByColumn(column)\">\n            {{column.heading}}\n            <i\n              class=\"fa sky-grid-heading-sort\"\n              [ngStyle]=\"{'visibility: hidden': (getSortDirection(column.field) | async)}\"\n              [ngClass]=\"{ 'fa-caret-up': (getSortDirection(column.field) | async) === 'asc', 'fa-caret-down': (getSortDirection(column.field) | async) === 'desc' }\"\n            >\n            </i>\n          </th>\n        </tr>\n      </thead>\n      <tbody class=\"sky-grid-tbody\">\n        <tr\n          class=\"sky-grid-row\"\n          *ngFor=\"let item of items\"\n          [attr.sky-cmp-id]=\"item.id\">\n          <td\n            class=\"sky-grid-cell\"\n            *ngFor=\"let column of displayedColumns; let last = last; let i = index\">\n            <sky-grid-cell\n              [template]=\"column.template || defaultCellTemplate\"\n              [fieldSelector]=\"column.field\"\n              [item]=\"item\"\n              [columnId]=\"column.id\"\n              [attr.sky-cmp-id]=\"column.id || column.field\"\n              [style.width.px]=\"last ? null : column.width\">\n            </sky-grid-cell>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n\n<ng-template #defaultCellTemplate let-row=\"row\" let-value=\"value\">{{value}}</ng-template>\n`,\n  styles: [`.sky-grid {\n  position: relative;\n  display: block;\n}\n\n.sky-grid-table-container {\n  overflow: auto;\n}\n\n.sky-grid-table {\n  position: relative;\n  table-layout: fixed;\n  border-collapse: collapse;\n  margin: 0;\n  font-size: 15px;\n  min-width: 100%;\n}\n\n.sky-grid-table.sky-grid-fit {\n  width: 100%;\n}\n\n.sky-grid-tbody {\n  background-color: #ffffff;\n}\n\n.sky-grid-row {\n  border-bottom: 1px dotted #cdcfd2;\n}\n\n.sky-grid-row:nth-child(odd) {\n  background-color: #fbfbfb;\n}\n\n.sky-grid-row .sky-grid-cell {\n  padding: 0;\n}\n\n.sky-grid-heading {\n  border-top: 1px solid #cdcfd2;\n  border-bottom: 1px solid #cdcfd2;\n  border-left: 1px solid #cdcfd2;\n  border-right: 1px solid #cdcfd2;\n  font-family: \"Blackbaud Sans\", \"Helvetica Neue\", Arial, sans-serif;\n  color: #686c73;\n  font-weight: 400;\n  font-size: 15px;\n  border-right-width: 0px;\n  cursor: pointer;\n  background-color: #ffffff;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 8px;\n  text-align: left;\n  -webkit-user-select: none;\n  -webkit-tap-highlight-color: transparent;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.sky-grid-heading:first-child {\n  border-left: 1px solid transparent;\n}\n\n.sky-grid-heading.sky-grid-header-dragging {\n  padding: 8px;\n  background-color: #eeeeef;\n}\n\n.sky-grid-has-toolbar .sky-grid-heading {\n  border-top-width: 0px;\n}\n\n/*\n  This prevents grid header width from changing when sort indication changes\n*/\n.sky-grid-heading-sort {\n  min-width: 8px;\n}\n`],\n  viewProviders: [ DragulaService ],\n  providers: [\n    SkyGridAdapterService\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DragulaService, },\n{type: ChangeDetectorRef, },\n{type: SkyGridAdapterService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selectedColumnIds': [{ type: Input },],\n'fit': [{ type: Input },],\n'width': [{ type: Input },],\n'height': [{ type: Input },],\n'data': [{ type: Input },],\n'columns': [{ type: Input },],\n'hasToolbar': [{ type: Input },],\n'sortField': [{ type: Input },],\n'selectedColumnIdsChange': [{ type: Output },],\n'sortFieldChange': [{ type: Output },],\n'columnComponents': [{ type: ContentChildren, args: [SkyGridColumnComponent, { descendants: true }, ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}