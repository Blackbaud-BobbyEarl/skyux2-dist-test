import { ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Observable } from 'rxjs/Observable';
import { SkyModalService } from '../modal';
import { SkyResourcesService } from '../resources';
import { SkyToken } from '../tokens';
import { SkySelectField, SkySelectFieldSelectMode } from './types';
export declare class SkySelectFieldComponent implements ControlValueAccessor {
    private changeDetector;
    private modalService;
    private resourcesService;
    ariaLabel: string;
    ariaLabelledBy: string;
    data: Observable<SkySelectField[]>;
    descriptorKey: string;
    disabled: boolean;
    selectMode: SkySelectFieldSelectMode;
    multipleSelectOpenButtonText: string;
    singleSelectClearButtonTitle: string;
    singleSelectOpenButtonTitle: string;
    singleSelectPlaceholderText: string;
    pickerHeading: string;
    value: any;
    readonly singleSelectModeValue: string;
    tokens: SkyToken[];
    private _descriptorKey;
    private _disabled;
    private _multipleSelectOpenButtonText;
    private _pickerHeading;
    private _selectMode;
    private _singleSelectClearButtonTitle;
    private _singleSelectOpenButtonTitle;
    private _singleSelectPlaceholderText;
    private _value;
    constructor(changeDetector: ChangeDetectorRef, modalService: SkyModalService, resourcesService: SkyResourcesService);
    onTokensChange(change: SkyToken[]): void;
    openPicker(): void;
    writeValue(value: any): void;
    onChange: (value: any) => void;
    onTouched: () => void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(disabled: boolean): void;
    clearSelection(): void;
    private setTokensFromValue();
}
