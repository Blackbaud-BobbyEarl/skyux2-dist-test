import { ChangeDetectorRef, SimpleChanges, EventEmitter, OnChanges, OnDestroy, OnInit } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import 'rxjs/add/operator/takeUntil';
import { SkyToken, SkyTokensMessage, SkyTokenSelectedEventArgs } from './types';
export declare class SkyTokensComponent implements OnInit, OnChanges, OnDestroy {
    private changeDetector;
    disabled: boolean;
    dismissible: boolean;
    displayWith: string;
    focusable: boolean;
    messageStream: Subject<SkyTokensMessage>;
    tokens: SkyToken[];
    tokensChange: EventEmitter<SkyToken[]>;
    focusIndexOverRange: EventEmitter<void>;
    focusIndexUnderRange: EventEmitter<void>;
    tokenSelected: EventEmitter<SkyTokenSelectedEventArgs>;
    activeIndex: number;
    private tokenComponents;
    private ngUnsubscribe;
    private _activeIndex;
    private _disabled;
    private _dismissible;
    private _focusable;
    private _tokens;
    private _displayWith;
    constructor(changeDetector: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onTokenClick(token: SkyToken): void;
    onTokenKeyDown(event: KeyboardEvent): void;
    selectToken(token: SkyToken): void;
    removeToken(token: SkyToken): void;
    private focusPreviousToken();
    private focusNextToken();
    private focusLastToken();
    private focusActiveToken();
    private removeActiveToken();
    private initMessageStream();
    private notifyTokenSelected(token);
}
