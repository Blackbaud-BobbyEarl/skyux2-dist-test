{"version":3,"sources":["../../../.srctemp/modules/checkbox/checkbox.component.ts"],"names":[],"mappings":"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","file":"checkbox.component.js","sourceRoot":"","sourcesContent":["\nimport {\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    forwardRef\n} from '@angular/core';\n\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\n/**\n * Monotonically increasing integer used to auto-generate unique ids for checkbox components.\n */\nlet nextId = 0;\n\n/**\n * Provider Expression that allows sky-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n */\n// tslint:disable:no-forward-ref no-use-before-declare\nexport const SKY_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SkyCheckboxComponent),\n  multi: true\n};\n\n// A simple change event emitted by the SkyCheckbox component.\nexport class SkyCheckboxChange {\n  public source: SkyCheckboxComponent;\n  public checked: boolean;\n}\n// tslint:enable\n\n\nexport class SkyCheckboxComponent implements ControlValueAccessor {\n\n  /**\n   * Hidden label for screen readers.\n   */\n  \n  public label: string = '';\n\n  /**\n   * Id of label for the checkbox.\n   */\n  \n  public labelledBy: string;\n\n  \n  public id: string = `sky-checkbox-${++nextId}`;\n\n  \n  public disabled: boolean = false;\n\n  \n  public tabindex: number = 0;\n\n  \n  public name: string = `sky-checkbox-${++nextId}`;\n\n  \n  public change: EventEmitter<SkyCheckboxChange> = new EventEmitter<SkyCheckboxChange>();\n\n  private _checked: boolean = false;\n\n  public get inputId(): string {\n    return `input-${this.id}`;\n  }\n\n  /** Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor. */\n  /*istanbul ignore next */\n  public onTouched: () => any = () => {};\n\n  \n  public get checked() {\n    return this._checked;\n  }\n\n  public set checked(checked: boolean) {\n    if (checked !== this.checked) {\n      this._checked = checked;\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  public writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  public registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  public registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   */\n  public onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    if (!this.disabled) {\n      this._toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  public onInputBlur() {\n    this.onTouched();\n  }\n\n  private _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\n\n  private _emitChangeEvent() {\n    let event = new SkyCheckboxChange();\n    event.source = this;\n    event.checked = this._checked;\n\n    this._controlValueAccessorChangeFn(this._checked);\n    this.change.emit(event);\n  }\n\n  /**\n   * Toggles the `checked` value between true and false\n   */\n  private _toggle() {\n    this.checked = !this.checked;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sky-checkbox',\n  template: `<label class=\"sky-checkbox-wrapper\" [ngClass]=\"{'sky-checkbox-wrapper-disabled': disabled}\">\n  <input type=\"checkbox\"\n        [id]=\"inputId\"\n        [checked]=\"checked\"\n        [disabled]=\"disabled\"\n        [name]=\"name\"\n        [tabIndex]=\"tabindex\"\n        [attr.aria-label]=\"label\"\n        [attr.aria-labelledby]=\"labelledBy\"\n        (blur)=\"onInputBlur()\"\n        (change)=\"onInteractionEvent($event)\"/>\n  <span class=\"sky-checkbox\"></span>\n  <ng-content select=\"sky-checkbox-label\"></ng-content>\n</label>\n`,\n  styles: [`.sky-checkbox-wrapper {\n  cursor: pointer;\n  position: relative;\n}\n\n.sky-checkbox-wrapper.sky-checkbox-wrapper-disabled, .sky-checkbox-wrapper.sky-checkbox-wrapper-disabled input {\n  cursor: default;\n}\n\n.sky-checkbox-wrapper input {\n  opacity: 0;\n  position: absolute;\n  height: 22px;\n  width: 22px;\n  margin: 0;\n  padding: 0;\n  cursor: pointer;\n}\n\n.sky-checkbox {\n  background-color: #ffffff;\n  border-top: 1px solid #cdcfd2;\n  border-bottom: 1px solid #cdcfd2;\n  border-left: 1px solid #cdcfd2;\n  border-right: 1px solid #cdcfd2;\n  display: inline-block;\n  height: 22px;\n  margin: 0;\n  padding: 0;\n  vertical-align: middle;\n  width: 22px;\n  text-align: center;\n  font-size: 15px;\n  line-height: 19px;\n}\n\n.sky-checkbox-wrapper input:hover + .sky-checkbox {\n  border: 2px solid #007ca6;\n}\n\n.sky-checkbox-wrapper input:checked + .sky-checkbox {\n  background-color: #007ca6;\n  border-color: #007ca6;\n  border-width: 1px;\n}\n\n.sky-checkbox-wrapper input:checked + .sky-checkbox:before {\n  color: #ffffff;\n  content: \"\\\\f00c\";\n  font-family: FontAwesome;\n  font-size: 13px;\n}\n\n.sky-checkbox-wrapper input:disabled + .sky-checkbox {\n  background-color: #eeeeef;\n  border-top: 1px solid #e2e3e4;\n  border-bottom: 1px solid #e2e3e4;\n  border-left: 1px solid #e2e3e4;\n  border-right: 1px solid #e2e3e4;\n}\n\n.sky-checkbox-wrapper input:focus + .sky-checkbox {\n  outline: thin dotted;\n  outline: -webkit-focus-ring-color auto 5px;\n}\n`],\n  providers: [SKY_CHECKBOX_CONTROL_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'labelledBy': [{ type: Input },],\n'id': [{ type: Input },],\n'disabled': [{ type: Input },],\n'tabindex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'checked': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}