import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { SkyDateFormatter } from './date-formatter';
import { SkyDatepickerDate } from './datepicker-date';
export declare class SkyDatepickerCalendarInnerComponent implements OnInit, OnChanges {
    startingDay: number;
    minDate: Date;
    maxDate: Date;
    selectedDate: Date;
    selectedDateChange: EventEmitter<Date>;
    calendarModeChange: EventEmitter<string>;
    activeDate: Date;
    minMode: string;
    maxMode: string;
    monthColLimit: number;
    yearColLimit: number;
    datepickerMode: string;
    yearRange: number;
    formatDay: string;
    formatMonth: string;
    formatYear: string;
    formatDayHeader: string;
    formatDayTitle: string;
    formatMonthTitle: string;
    datepickerId: string;
    stepDay: any;
    stepMonth: any;
    stepYear: any;
    protected modes: string[];
    protected dateFormatter: SkyDateFormatter;
    protected activeDateId: string;
    refreshViewHandlerDay: Function;
    compareHandlerDay: Function;
    refreshViewHandlerMonth: Function;
    compareHandlerMonth: Function;
    refreshViewHandlerYear: Function;
    compareHandlerYear: Function;
    handleKeydownDay: Function;
    handleKeydownMonth: Function;
    handleKeydownYear: Function;
    keys: any;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setCompareHandler(handler: Function, type: string): void;
    compare(date1: Date, date2: Date): any;
    setRefreshViewHandler(handler: Function, type: string): void;
    refreshView(): void;
    setKeydownHandler(handler: Function, type: string): void;
    handleKeydown(key: string, event: KeyboardEvent): void;
    dateFilter(date: Date, format: string): string;
    isActive(dateObject: any): boolean;
    onKeydown(event: KeyboardEvent): void;
    createDateObject(date: Date, format: string, isSecondary: boolean, id: string): SkyDatepickerDate;
    createCalendarRows(dates: Array<SkyDatepickerDate>, size: number): Array<Array<SkyDatepickerDate>>;
    fixTimeZone(date: Date): Date;
    selectCalendar(event: Event, date: Date, closePicker?: boolean): void;
    select(date: Date, isManual?: boolean): void;
    moveCalendar(event: Event, direction: number): void;
    move(direction: number): void;
    toggleModeCalendar(event: Event, direction: number): void;
    toggleMode(direction: number): void;
    protected isDisabled(date: Date): boolean;
}
