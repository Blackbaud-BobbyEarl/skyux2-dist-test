{"version":3,"sources":["../../../.srctemp/demos/dropdown/dropdown-demo.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,iBAAiB,EACjB,SAAS,EACV,MAAM,eAAA,CAAgB;AAEvB,OAAO,EAAE,OAAA,EAAQ,MAAO,cAAA,CAAe;AAEvC,OAAO,EAEL,sBAAsB,EAEvB,MAAM,YAAA,CAAa;AAGpB;IAUE,kCACU,cAAiC;QAAjC,mBAAc,GAAd,cAAc,CAAmB;QAVpC,uBAAkB,GAAG,IAAI,OAAO,EAAsB,CAAC;QACvD,UAAK,GAAU;YACpB,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE;YACrC,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE;YACpC,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE;YACrC,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE;YACrC,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE;SACtC,CAAC;IAIE,CAAC;IAEE,gDAAa,GAApB,UAAqB,MAAc;QACjC,KAAK,CAAC,sBAAsB,GAAG,MAAM,CAAC,CAAC;IACzC,CAAC;IAEM,+CAAY,GAAnB;QACE,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IAEM,gDAAa,GAApB;QACE,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC;IAEM,qDAAkB,GAAzB;QACE,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;IAC9D,CAAC;IAEM,gDAAa,GAApB;QACE,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;IACzD,CAAC;IAEM,oDAAiB,GAAxB;QACE,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,CAAC;IAC7D,CAAC;IAEM,8CAAW,GAAlB;QACE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;IACtC,CAAC;IAEM,gDAAa,GAApB,UAAqB,MAA6B;QAChD,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC;YACrC,OAAO,CAAC,GAAG,CAAC,sCAAsC,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;IAEO,8CAAW,GAAnB,UAAoB,IAA4B;QAC9C,IAAM,OAAO,GAAuB,EAAE,IAAI,MAAA,EAAE,CAAC;QAC7C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IA4LH,+BAAC;AAAD,CAhPA,AAgPC;;AA3LM,mCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,mBAAmB;gBAC7B,QAAQ,EAAE,u3JAiLX;aACA,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,uCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,iBAAiB,GAAG;CAC1B,EAF6F,CAE7F,CAAC","file":"dropdown-demo.component.js","sourceRoot":"","sourcesContent":["import {\n  ChangeDetectorRef,\n  Component\n} from '@angular/core';\n\nimport { Subject } from 'rxjs/Subject';\n\nimport {\n  SkyDropdownMessage,\n  SkyDropdownMessageType,\n  SkyDropdownMenuChange\n} from '../../core';\n\n\nexport class SkyDropdownDemoComponent {\n  public dropdownController = new Subject<SkyDropdownMessage>();\n  public items: any[] = [\n    { name: 'Option 1', disabled: false },\n    { name: 'Option 2', disabled: true },\n    { name: 'Option 3', disabled: false },\n    { name: 'Option 4', disabled: false },\n    { name: 'Option 5', disabled: false }\n  ];\n\n  constructor(\n    private changeDetector: ChangeDetectorRef\n  ) { }\n\n  public optionClicked(option: number) {\n    alert('You selected option ' + option);\n  }\n\n  public openDropdown() {\n    this.sendMessage(SkyDropdownMessageType.Open);\n  }\n\n  public closeDropdown() {\n    this.sendMessage(SkyDropdownMessageType.Close);\n  }\n\n  public focusTriggerButton() {\n    this.sendMessage(SkyDropdownMessageType.FocusTriggerButton);\n  }\n\n  public focusNextItem() {\n    this.sendMessage(SkyDropdownMessageType.FocusNextItem);\n  }\n\n  public focusPreviousItem() {\n    this.sendMessage(SkyDropdownMessageType.FocusPreviousItem);\n  }\n\n  public changeItems() {\n    this.items.pop();\n    this.changeDetector.detectChanges();\n  }\n\n  public onMenuChanges(change: SkyDropdownMenuChange) {\n    if (change.activeIndex !== undefined) {\n      console.log('The menu\\'s active index changed to:', change.activeIndex);\n    }\n  }\n\n  private sendMessage(type: SkyDropdownMessageType) {\n    const message: SkyDropdownMessage = { type };\n    this.dropdownController.next(message);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sky-dropdown-demo',\n  template: `\n<h3>\n  Button types and styles\n</h3>\n\n<sky-row>\n  <sky-column screenSmall=\"6\">\n    <ul class=\"sky-list-unstyled\">\n      <li>\n        Default (select) style:\n        <br>\n        <sky-dropdown>\n          <sky-dropdown-button>\n            Show dropdown\n          </sky-dropdown-button>\n          <sky-dropdown-menu>\n            <sky-dropdown-item *ngFor=\"let item of items\">\n              <button type=\"button\" [attr.disabled]=\"item.disabled ? '' : null\">\n                {{ item.name }}\n              </button>\n            </sky-dropdown-item>\n          </sky-dropdown-menu>\n        </sky-dropdown>\n      </li>\n      <li>\n        Context menu style:\n        <br>\n        <sky-dropdown\n          buttonType=\"context-menu\">\n          <sky-dropdown-menu>\n            <sky-dropdown-item *ngFor=\"let item of items\">\n              <button type=\"button\" [attr.disabled]=\"item.disabled ? '' : null\">\n                {{ item.name }}\n              </button>\n            </sky-dropdown-item>\n          </sky-dropdown-menu>\n        </sky-dropdown>\n      </li>\n      <li>\n        Icon style:\n        <br>\n        <sky-dropdown\n          buttonType=\"folder-open-o\">\n          <sky-dropdown-menu>\n            <sky-dropdown-item *ngFor=\"let item of items\">\n              <button type=\"button\" [attr.disabled]=\"item.disabled ? '' : null\">\n                {{ item.name }}\n              </button>\n            </sky-dropdown-item>\n          </sky-dropdown-menu>\n        </sky-dropdown>\n      </li>\n    </ul>\n  </sky-column>\n  <sky-column screenSmall=\"6\">\n    <ul class=\"sky-list-unstyled\" style=\"text-align:right\">\n      <li>\n        Select primary style:\n        <br>\n        <sky-dropdown\n          alignment=\"right\"\n          buttonStyle=\"primary\">\n          <sky-dropdown-button>\n            Show dropdown\n          </sky-dropdown-button>\n          <sky-dropdown-menu>\n            <sky-dropdown-item *ngFor=\"let item of items\">\n              <button type=\"button\" [attr.disabled]=\"item.disabled ? '' : null\">\n                {{ item.name }}\n              </button>\n            </sky-dropdown-item>\n          </sky-dropdown-menu>\n        </sky-dropdown>\n      </li>\n      <li>\n        Context menu with primary style:\n        <br>\n        <sky-dropdown\n          alignment=\"right\"\n          buttonType=\"context-menu\"\n          buttonStyle=\"primary\">\n          <sky-dropdown-menu>\n            <sky-dropdown-item *ngFor=\"let item of items\">\n              <button type=\"button\" [attr.disabled]=\"item.disabled ? '' : null\">\n                {{ item.name }}\n              </button>\n            </sky-dropdown-item>\n          </sky-dropdown-menu>\n        </sky-dropdown>\n      </li>\n      <li>\n        Icon with primary style:\n        <br>\n        <sky-dropdown\n          alignment=\"right\"\n          buttonType=\"folder-open-o\"\n          buttonStyle=\"primary\">\n          <sky-dropdown-menu>\n            <sky-dropdown-item *ngFor=\"let item of items\">\n              <button type=\"button\" [attr.disabled]=\"item.disabled ? '' : null\">\n                {{ item.name }}\n              </button>\n            </sky-dropdown-item>\n          </sky-dropdown-menu>\n        </sky-dropdown>\n      </li>\n    </ul>\n  </sky-column>\n</sky-row>\n\n<h3>\n  Interacting with a dropdown programmatically\n</h3>\n\n<p>\n  <button\n    type=\"button\"\n    class=\"sky-btn sky-btn-default\"\n    (click)=\"openDropdown()\">\n    Open dropdown\n  </button>\n\n  <button\n    type=\"button\"\n    class=\"sky-btn sky-btn-default\"\n    (click)=\"closeDropdown()\">\n    Close dropdown\n  </button>\n\n  <button\n    type=\"button\"\n    class=\"sky-btn sky-btn-default\"\n    (click)=\"focusTriggerButton()\">\n    Focus trigger button\n  </button>\n\n  <button\n    type=\"button\"\n    class=\"sky-btn sky-btn-default\"\n    (click)=\"focusNextItem()\">\n    Focus next item\n  </button>\n\n  <button\n    type=\"button\"\n    class=\"sky-btn sky-btn-default\"\n    (click)=\"focusPreviousItem()\">\n    Focus previous item\n  </button>\n\n  <button\n    type=\"button\"\n    class=\"sky-btn sky-btn-default\"\n    (click)=\"changeItems()\">\n    Change items\n  </button>\n</p>\n<sky-dropdown\n  buttonStyle=\"primary\"\n  [dismissOnBlur]=\"false\"\n  [messageStream]=\"dropdownController\">\n  <sky-dropdown-button>\n    Open\n  </sky-dropdown-button>\n  <sky-dropdown-menu\n    [useNativeFocus]=\"false\"\n    (menuChanges)=\"onMenuChanges($event)\">\n    <sky-dropdown-item *ngFor=\"let item of items\">\n      <button type=\"button\" [attr.disabled]=\"item.disabled ? '' : null\">\n        {{ item.name }}\n      </button>\n    </sky-dropdown-item>\n  </sky-dropdown-menu>\n</sky-dropdown>\n<p>\n  This menu does not bring the active items to focus; this is useful for custom implementations where the focus should remain on a different control.\n</p>\n`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}