{"version":3,"sources":["../../../.srctemp/demos/autocomplete/autocomplete-demo.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EAEV,MAAM,eAAA,CAAgB;AAEvB,OAAO,EACL,WAAW,EAEZ,MAAM,gBAAA,CAAiB;AAUxB;IA+CE,sCACU,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QA9C3B,wBAAmB,GAAQ;YAChC,aAAa,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;SAC/B,CAAC;QAGK,WAAM,GAAU;YACrB,EAAE,IAAI,EAAE,KAAK,EAAE;YACf,EAAE,IAAI,EAAE,MAAM,EAAE;YAChB,EAAE,IAAI,EAAE,OAAO,EAAE;YACjB,EAAE,IAAI,EAAE,QAAQ,EAAE;YAClB,EAAE,IAAI,EAAE,MAAM,EAAE;YAChB,EAAE,IAAI,EAAE,QAAQ,EAAE;YAClB,EAAE,IAAI,EAAE,QAAQ,EAAE;YAClB,EAAE,IAAI,EAAE,OAAO,EAAE;YACjB,EAAE,IAAI,EAAE,WAAW,EAAE;YACrB,EAAE,IAAI,EAAE,OAAO,EAAE;YACjB,EAAE,IAAI,EAAE,OAAO,EAAE;SAClB,CAAC;QAGK,WAAM,GAAU;YACrB,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,EAAE;YAC1B,EAAE,KAAK,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,EAAE;YAC5B,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,EAAE;YAC1B,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,EAAE;SAC5B,CAAC;QAGK,YAAO,GAAU;YACtB,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,0CAA0C,EAAE;YAC5E,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,wCAAwC,EAAE;YACxE,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,wCAAwC,EAAE;YACxE,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,uCAAuC,EAAE;YACtE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,0CAA0C,EAAE;YAC5E,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,yCAAyC,EAAE;YAC1E,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,yCAAyC,EAAE;YAC1E,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,0CAA0C,EAAE;SAC7E,CAAC;QAEK,kBAAa,GAA0C;YAC5D,UAAC,UAAkB,EAAE,IAAS;gBAC5B,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC;YAC/B,CAAC;SACF,CAAC;IAIE,CAAC;IAEE,+CAAQ,GAAf;QACE,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEM,yDAAkB,GAAzB,UAA0B,QAAa;QACrC,KAAK,CAAC,yBAAyB,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC9D,CAAC;IAEM,yDAAkB,GAAzB;QACE,KAAK,CAAC,yBAAyB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7E,CAAC;IAEM,wDAAiB,GAAxB,UAAyB,IAAoC;QAC3D,KAAK,CAAC,kBAAgB,IAAI,CAAC,YAAY,CAAC,IAAM,CAAC,CAAC;IAClD,CAAC;IAEM,6DAAsB,GAA7B;QACE,IAAM,cAAc,GAAG,UAAC,UAAkB,EAAE,MAAa;YACvD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAiB;gBACnC,IAAM,eAAe,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;gBAEjD,IAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,UAAC,KAAU;oBACvC,IAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC;oBACxB,IAAM,OAAO,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACpF,MAAM,CAAC,OAAO,CAAC;gBACjB,CAAC,CAAC,CAAC;gBAEH,6BAA6B;gBAC7B,UAAU,CAAC;oBACT,OAAO,CAAC,OAAO,CAAC,CAAC;gBACnB,CAAC,EAAE,GAAG,CAAC,CAAC;YACV,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,MAAM,CAAC,cAAc,CAAC;IACxB,CAAC;IAEO,iDAAU,GAAlB;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACzC,aAAa,EAAE,SAAS;YACxB,cAAc,EAAE,EAAE;YAClB,YAAY,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,EAAE;SACzC,CAAC,CAAC;IACL,CAAC;IAuOH,mCAAC;AAAD,CArUA,AAqUC;;AAtOM,uCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,uBAAuB;gBACjC,QAAQ,EAAE,66JAqMX;gBACC,MAAM,EAAE,CAAC,sbAsBV,CAAC;aACD,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,2CAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,WAAW,GAAG;CACpB,EAF6F,CAE7F,CAAC","file":"autocomplete-demo.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  OnInit\n} from '@angular/core';\n\nimport {\n  FormBuilder,\n  FormGroup\n} from '@angular/forms';\n\nimport {\n  SkyAutocompleteSearchFunction,\n  SkyAutocompleteSearchFunctionFilter,\n  SkyAutocompleteSearchFunctionResponse,\n  SkyAutocompleteSelectionChange\n} from '../../core';\n\n\nexport class SkyAutocompleteDemoComponent implements OnInit {\n  public reactiveForm: FormGroup;\n  public templateDrivenModel: any = {\n    favoriteColor: { name: 'Red' }\n  };\n\n  public selectedColor: any;\n  public colors: any[] = [\n    { name: 'Red' },\n    { name: 'Blue' },\n    { name: 'Green' },\n    { name: 'Orange' },\n    { name: 'Pink' },\n    { name: 'Purple' },\n    { name: 'Yellow' },\n    { name: 'Brown' },\n    { name: 'Turquoise' },\n    { name: 'White' },\n    { name: 'Black' }\n  ];\n\n  public largestOcean: any;\n  public oceans: any[] = [\n    { title: 'Arctic', id: 1 },\n    { title: 'Atlantic', id: 2 },\n    { title: 'Indian', id: 3 },\n    { title: 'Pacific', id: 4 }\n  ];\n\n  public farthestPlanet: any;\n  public planets: any[] = [\n    { name: 'Mercury', description: 'Mercury is a planet in our solar system.' },\n    { name: 'Venus', description: 'Venus is a planet in our solar system.' },\n    { name: 'Earth', description: 'Earth is a planet in our solar system.' },\n    { name: 'Mars', description: 'Mars is a planet in our solar system.' },\n    { name: 'Jupiter', description: 'Jupiter is a planet in our solar system.' },\n    { name: 'Saturn', description: 'Saturn is a planet in our solar system.' },\n    { name: 'Uranus', description: 'Uranus is a planet in our solar system.' },\n    { name: 'Neptune', description: 'Neptune is a planet in our solar system.' }\n  ];\n\n  public searchFilters: SkyAutocompleteSearchFunctionFilter[] = [\n    (searchText: string, item: any): boolean => {\n      return (item.name !== 'Red');\n    }\n  ];\n\n  constructor(\n    private formBuilder: FormBuilder\n  ) { }\n\n  public ngOnInit(): void {\n    this.createForm();\n  }\n\n  public submitTemplateForm(formData: any): void {\n    alert('Form submitted with: \\n' + JSON.stringify(formData));\n  }\n\n  public submitReactiveForm(): void {\n    alert('Form submitted with: \\n' + JSON.stringify(this.reactiveForm.value));\n  }\n\n  public onPlanetSelection(args: SkyAutocompleteSelectionChange): void {\n    alert(`You selected ${args.selectedItem.name}`);\n  }\n\n  public getOceanSearchFunction(): SkyAutocompleteSearchFunction {\n    const searchFunction = (searchText: string, oceans: any[]): SkyAutocompleteSearchFunctionResponse => {\n      return new Promise((resolve: Function) => {\n        const searchTextLower = searchText.toLowerCase();\n\n        const results = oceans.filter((ocean: any) => {\n          const val = ocean.title;\n          const isMatch = (val && val.toString().toLowerCase().indexOf(searchTextLower) > -1);\n          return isMatch;\n        });\n\n        // Simulate an async request.\n        setTimeout(() => {\n          resolve(results);\n        }, 500);\n      });\n    };\n\n    return searchFunction;\n  }\n\n  private createForm(): void {\n    this.reactiveForm = this.formBuilder.group({\n      favoriteColor: undefined,\n      farthestPlanet: {},\n      largestOcean: { title: 'Arctic', id: 1 }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sky-autocomplete-demo',\n  template: `<h2 class=\"sky-section-heading\">\n  Reactive form setup\n</h2>\n\n<form\n  class=\"autocomplete-demo-form\"\n  [formGroup]=\"reactiveForm\"\n  (ngSubmit)=\"submitReactiveForm()\"\n  novalidate>\n\n  <h3 class=\"sky-subsection-heading\">\n    Basic\n  </h3>\n\n  <p>\n    The following field uses the default settings.\n  </p>\n\n  <div class=\"sky-form-group\">\n    <label\n      for=\"my-autocomplete-reactive-basic\"\n      class=\"sky-control-label\">\n      What is your favorite color?\n    </label>\n\n    <sky-autocomplete\n      [data]=\"colors\">\n      <input\n        skyAutocomplete\n        id=\"my-autocomplete-reactive-basic\"\n        type=\"text\"\n        formControlName=\"favoriteColor\">\n    </sky-autocomplete>\n  </div>\n\n  <h3 class=\"sky-subsection-heading\">\n    Advanced\n  </h3>\n\n  <div style=\"margin-bottom:10px;\">\n    The following field:<br>\n    <ul>\n      <li>utilizes a custom search result template,</li>\n      <li>searches against the name and description properties,</li>\n      <li>limits the search results to two (2),</li>\n      <li>runs the search if the query is at least three (3) characters long,</li>\n      <li>and fires an event when a selection is made.</li>\n    </ul>\n  </div>\n\n  <div class=\"sky-form-group\">\n    <label\n      for=\"my-autocomplete-reactive-advanced\"\n      class=\"sky-control-label\">\n      Which planet is farthest from the sun?\n    </label>\n\n    <sky-autocomplete\n      [data]=\"planets\"\n      [propertiesToSearch]=\"['name', 'description']\"\n      [searchResultsLimit]=\"2\"\n      [searchResultTemplate]=\"planetSearchResultTemplate\"\n      [searchTextMinimumCharacters]=\"3\"\n      (selectionChange)=\"onPlanetSelection($event)\">\n      <input\n        skyAutocomplete\n        id=\"my-autocomplete-reactive-advanced\"\n        type=\"text\"\n        formControlName=\"farthestPlanet\">\n    </sky-autocomplete>\n  </div>\n\n  <h3 class=\"sky-subsection-heading\">\n    Search filters\n  </h3>\n\n  <p>\n    The following field provides a custom function that filters the data before every search attempt.\n  </p>\n\n  <div class=\"sky-form-group\">\n    <label\n      for=\"my-autocomplete-reactive-filters\"\n      class=\"sky-control-label\">\n      Pick a color (\"Red\" is not available).\n    </label>\n\n    <sky-autocomplete\n      [data]=\"colors\"\n      [searchFilters]=\"searchFilters\">\n      <input\n        skyAutocomplete\n        id=\"my-autocomplete-reactive-filters\"\n        type=\"text\"\n        formControlName=\"favoriteColor\">\n    </sky-autocomplete>\n  </div>\n\n  <h3 class=\"sky-subsection-heading\">\n    Custom search function\n  </h3>\n\n  <p>\n    The following field has a preselected value and utilizes a custom search function, as well as a custom template for the search results.\n  </p>\n\n  <div class=\"sky-form-group\">\n    <label\n      for=\"my-autocomplete-reactive-custom\"\n      class=\"sky-control-label\">\n      Which ocean is the largest?\n    </label>\n\n    <sky-autocomplete\n      [data]=\"oceans\"\n      [search]=\"getOceanSearchFunction()\"\n      [searchResultTemplate]=\"oceanSearchResultTemplate\"\n      [descriptorProperty]=\"'title'\">\n      <input\n        skyAutocomplete\n        id=\"my-autocomplete-reactive-custom\"\n        type=\"text\"\n        formControlName=\"largestOcean\">\n    </sky-autocomplete>\n  </div>\n\n  <div class=\"autocomplete-demo-alert\">\n    <strong>Form model:</strong>\n    <pre>{{ reactiveForm.value | json }}</pre>\n  </div>\n\n  <button\n    class=\"sky-btn sky-btn-default\"\n    type=\"submit\">\n    Submit\n  </button>\n</form>\n\n<h2 class=\"sky-section-heading\">\n  Template-driven form setup\n</h2>\n\n<form\n  class=\"autocomplete-demo-form\"\n  #myForm=\"ngForm\"\n  (ngSubmit)=\"submitTemplateForm(myForm.value)\"\n  novalidate>\n\n  <p>\n    This field uses the default settings and has a preselected value.\n  </p>\n\n  <div class=\"sky-form-group\">\n    <label\n      for=\"my-autocomplete-template-driven\"\n      class=\"sky-control-label\">\n      What is your favorite color?\n    </label>\n\n    <sky-autocomplete\n      [data]=\"colors\">\n      <input\n        skyAutocomplete\n        id=\"my-autocomplete-template-driven\"\n        type=\"text\"\n        name=\"favoriteColor\"\n        [(ngModel)]=\"templateDrivenModel.favoriteColor\">\n    </sky-autocomplete>\n  </div>\n\n  <div class=\"autocomplete-demo-alert\">\n    <strong>Form model:</strong>\n    <pre>{{ myForm.value | json }}</pre>\n  </div>\n\n  <button\n    class=\"sky-btn sky-btn-default\"\n    type=\"submit\">\n    Submit\n  </button>\n</form>\n\n<!-- Custom search result templates -->\n\n<ng-template\n  let-item=\"item\"\n  #planetSearchResultTemplate>\n  <strong>{{ item.name }}</strong><br>\n  {{ item.description }}\n</ng-template>\n\n<ng-template\n  let-item=\"item\"\n  #oceanSearchResultTemplate>\n  <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i>\n  {{ item.title }} &bull; ID {{ item.id }}\n</ng-template>\n`,\n  styles: [`.autocomplete-demo-form ::ng-deep .sky-form-group {\n  background-color: #eeeeef;\n  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.3);\n  border-radius: 3px;\n  margin: 10px 0;\n  padding: 10px;\n}\n\n.autocomplete-demo-form ::ng-deep h3 {\n  margin-top: 30px;\n}\n\n.autocomplete-demo-alert {\n  padding: 10px;\n  margin-bottom: 10px;\n  border: 1px solid #cdcfd2;\n  border-radius: 3px;\n}\n\n.autocomplete-demo-alert pre {\n  margin: 0;\n}\n`]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: FormBuilder, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}