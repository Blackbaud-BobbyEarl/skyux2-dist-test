{"version":3,"sources":["../../../.srctemp/demos/colorpicker/colorpicker-demo.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACV,MAAM,eAAA,CAAgB;AAEvB,OAAO,EAAE,OAAA,EAAQ,MAAO,cAAA,CAAe;AAEvC,OAAO,EAGL,yBAAyB,EAC1B,MAAM,YAAA,CAAa;AAGpB;IAAA;QAIS,mBAAc,GAAG,SAAS,CAAC;QAE3B,0BAAqB,GAAG,MAAM,CAAC;QAC/B,0BAAqB,GAAG,MAAM,CAAC;QAC/B,kBAAa,GAAG;YACrB,SAAS;YACT,SAAS;YACT,SAAS;YACT,MAAM;YACN,SAAS;YACT,SAAS;YACT,SAAS;YACT,SAAS;YACT,SAAS;YACT,SAAS;YACT,SAAS;YACT,SAAS;SACV,CAAC;QACK,0BAAqB,GAAG,IAAI,OAAO,EAAyB,CAAC;QAC7D,oBAAe,GAAG,KAAK,CAAC;IAoMjC,CAAC;IAlMQ,4DAAsB,GAA7B,UAA8B,IAA0B;QACtD,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IAEM,qDAAe,GAAtB;QACE,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;IAEM,sDAAgB,GAAvB;QACE,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC;IAEM,uDAAiB,GAAxB;QACE,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,CAAC;IAChE,CAAC;IAEO,iDAAW,GAAnB,UAAoB,IAA+B;QACjD,IAAM,OAAO,GAA0B,EAAE,IAAI,MAAA,EAAE,CAAC;QAChD,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IA+KH,kCAAC;AAAD,CA3NA,AA2NC;;AA9KM,sCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,sBAAsB;gBAChC,QAAQ,EAAE,kzJAqKX;aACA,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,0CAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"colorpicker-demo.component.js","sourceRoot":"","sourcesContent":["import {\n  Component\n} from '@angular/core';\n\nimport { Subject } from 'rxjs/Subject';\n\nimport {\n  SkyColorpickerOutput,\n  SkyColorpickerMessage,\n  SkyColorpickerMessageType\n} from '../../core';\n\n\nexport class SkyColorpickerDemoComponent {\n  public color1: any;\n  public color2: any;\n  public color3: any;\n  public selectedColor1 = '#2889e5';\n\n  public selectedOutputFormat1 = 'rgba';\n  public selectedOutputFormat3 = 'rgba';\n  public presetColors1 = [\n    '#333333',\n    '#888888',\n    '#EFEFEF',\n    '#FFF',\n    '#BD4040',\n    '#617FC2',\n    '#60AC68',\n    '#3486BA',\n    '#E87134',\n    '#DA9C9C',\n    '#A1B1A7',\n    '#68AFEF'\n  ];\n  public colorpickerController = new Subject<SkyColorpickerMessage>();\n  public showResetButton = false;\n\n  public onSelectedColorChanged(args: SkyColorpickerOutput) {\n    console.log('You selected this color:', args);\n  }\n\n  public openColorpicker() {\n    this.sendMessage(SkyColorpickerMessageType.Open);\n  }\n\n  public resetColorpicker() {\n    this.sendMessage(SkyColorpickerMessageType.Reset);\n  }\n\n  public toggleResetButton() {\n    this.sendMessage(SkyColorpickerMessageType.ToggleResetButton);\n  }\n\n  private sendMessage(type: SkyColorpickerMessageType) {\n    const message: SkyColorpickerMessage = { type };\n    this.colorpickerController.next(message);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sky-colorpicker-demo',\n  template: `<h3>\n  Colorpicker types and formats\n</h3>\n\n<div style=\"margin-bottom: 10px\">\n  <sky-colorpicker\n    (selectedColorChanged)=\"onSelectedColorChanged($event)\"\n    #colorPickerExample1>\n    <input\n      [skyColorpickerInput]=\"colorPickerExample1\"\n      [(ngModel)]=\"color1\"\n      [presetColors]=\"presetColors1\"\n      [initialColor]=\"selectedColor1\"\n      [outputFormat]=\"selectedOutputFormat1\">\n  </sky-colorpicker>\n</div>\n\n<sky-definition-list>\n  <sky-definition-list-content>\n    <sky-definition-list-label>\n      RGBA\n    </sky-definition-list-label>\n    <sky-definition-list-value\n      *ngIf=\"color1?.rgba\">\n      {{color1?.rgba?.red}},\n      {{color1?.rgba?.green}},\n      {{color1?.rgba?.blue}},\n      {{color1?.rgba?.alpha}}\n    </sky-definition-list-value>\n  </sky-definition-list-content>\n  <sky-definition-list-content>\n    <sky-definition-list-label>\n      HSLA\n    </sky-definition-list-label>\n    <sky-definition-list-value\n      *ngIf=\"color1?.hsla\">\n      {{color1?.hsla?.hue}},\n      {{color1?.hsla?.saturation}},\n      {{color1?.hsla?.lightness}},\n      {{color1?.hsla?.alpha}}\n    </sky-definition-list-value>\n  </sky-definition-list-content>\n  <sky-definition-list-content>\n    <sky-definition-list-label>\n      HSVA\n    </sky-definition-list-label>\n    <sky-definition-list-value\n      *ngIf=\"color1?.hsva\">\n      {{color1?.hsva?.hue}},\n      {{color1?.hsva?.saturation}},\n      {{color1?.hsva?.value}},\n      {{color1?.hsva?.alpha}}\n    </sky-definition-list-value>\n  </sky-definition-list-content>\n  <sky-definition-list-content>\n    <sky-definition-list-label>\n      CMYK\n    </sky-definition-list-label>\n    <sky-definition-list-value\n      *ngIf=\"color1?.cmyk\">\n      {{color1?.cmyk?.cyan}},\n      {{color1?.cmyk?.magenta}},\n      {{color1?.cmyk?.yellow}},\n      {{color1?.cmyk?.key}}\n    </sky-definition-list-value>\n  </sky-definition-list-content>\n</sky-definition-list>\n\n<div style=\"margin-bottom: 10px\">\n  <sky-colorpicker #colorPickerExample2>\n    <input\n      type=\"text\"\n      [skyColorpickerInput]=\"colorPickerExample2\"\n      [(ngModel)]=\"color2\">\n  </sky-colorpicker>\n</div>\n\n<sky-definition-list>\n  <sky-definition-list-content>\n    <sky-definition-list-label>\n      HEX\n    </sky-definition-list-label>\n    <sky-definition-list-value *ngIf=\"color2?.hex\">\n      {{color2?.hex}}\n    </sky-definition-list-value>\n  </sky-definition-list-content>\n  <sky-definition-list-content>\n    <sky-definition-list-label>\n      RGBA CSS\n    </sky-definition-list-label>\n    <sky-definition-list-value *ngIf=\"color2?.rgbaText\">\n      <div style=\"margin-bottom: 5px;\">\n        {{color2?.rgbaText}}\n      </div>\n      <div style=\"border-color: #999;width: 28px;height: 28px;border-radius: 50%;border-width: 2px;border-style: solid;\">\n        <div [style.background-color]=\"color2?.rgbaText\" style=\"width:24px;height:24px;    border-radius: 50%;\">&nbsp;</div>\n      </div>\n    </sky-definition-list-value>\n  </sky-definition-list-content>\n</sky-definition-list>\n\n<h3>\n  Interacting with a colorpicker programmatically\n</h3>\n\n<sky-colorpicker\n  [messageStream]=\"colorpickerController\"\n  [showResetButton]=\"showResetButton\"\n  (selectedColorChanged)=\"onSelectedColorChanged($event)\"\n  #colorPickerExample3>\n  <input\n    [skyColorpickerInput]=\"colorPickerExample3\"\n    [(ngModel)]=\"color3\"\n    [outputFormat]=\"selectedOutputFormat3\">\n</sky-colorpicker>\n\n<sky-definition-list>\n  <sky-definition-list-content>\n    <sky-definition-list-label>\n      HEX\n    </sky-definition-list-label>\n    <sky-definition-list-value *ngIf=\"color3?.hex\">\n      {{color3?.hex}}\n    </sky-definition-list-value>\n  </sky-definition-list-content>\n  <sky-definition-list-content>\n    <sky-definition-list-label>\n      RGBA CSS\n    </sky-definition-list-label>\n    <sky-definition-list-value *ngIf=\"color3?.rgbaText\">\n      <div style=\"margin-bottom: 5px;\">\n        {{color3?.rgbaText}}\n      </div>\n      <div style=\"border-color:#999; width:28px; height:28px; border-radius:50%; border-width:2px; border-style:solid;\">\n        <div\n          [style.background-color]=\"color3?.rgbaText\"\n          style=\"width:24px; height:24px; border-radius:50%;\">\n        </div>\n      </div>\n    </sky-definition-list-value>\n  </sky-definition-list-content>\n</sky-definition-list>\n\n<p>\n  <button\n    type=\"button\"\n    class=\"sky-btn sky-btn-default\"\n    (click)=\"openColorpicker()\">\n    Open colorpicker\n  </button>\n\n  <button\n    type=\"button\"\n    class=\"sky-btn sky-btn-default\"\n    (click)=\"resetColorpicker()\">\n    Reset colorpicker\n  </button>\n\n  <button\n    type=\"button\"\n    class=\"sky-btn sky-btn-default\"\n    (click)=\"toggleResetButton()\">\n    Toggle reset button\n  </button>\n</p>\n`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}