{"version":3,"sources":["../../../.srctemp/demos/list-filters/list-filters-demo.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAU,MAAO,eAAA,CAAgB;AAC1C,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAE7C,OAAO,EACL,eAAe,EAGhB,MAAM,YAAA,CAAa;AAEpB,OAAO,EAAE,gCAAA,EAAiC,MAAO,qCAAA,CAAsC;AACvF,OAAO,EAAE,8BAAA,EAA+B,MAAO,mCAAA,CAAoC;AAGnF;IA0CE,qCAAoB,YAA6B;QAA7B,iBAAY,GAAZ,YAAY,CAAiB;QAzC1C,gBAAW,GAAsB,EAAE,CAAC;QACpC,iBAAY,GAAsB,EAAE,CAAC;QAErC,UAAK,GAAoB,UAAU,CAAC,EAAE,CAAC;YAC5C;gBACE,EAAE,EAAE,CAAC;gBACL,IAAI,EAAE,QAAQ;gBACd,WAAW,EAAE,wBAAwB;gBACrC,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,QAAQ;aAChB;YACD;gBACE,EAAE,EAAE,CAAC;gBACL,IAAI,EAAE,OAAO;gBACb,WAAW,EAAE,kDAAkD;gBAC/D,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,QAAQ;aAChB;YACD;gBACE,EAAE,EAAE,CAAC;gBACL,IAAI,EAAE,MAAM;gBACZ,WAAW,EAAE,0CAA0C;gBACvD,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,OAAO;aACf;YACD;gBACE,EAAE,EAAE,CAAC;gBACL,IAAI,EAAE,YAAY;gBAClB,WAAW,EAAE,4CAA4C;gBACzD,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,KAAK;aACb;YACD;gBACE,EAAE,EAAE,CAAC;gBACL,IAAI,EAAE,WAAW;gBACjB,WAAW,EAAE,6CAA6C;gBAC1D,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,MAAM;aACd;SACF,CAAC,CAAC;IAEiD,CAAC;IAE9C,qDAAe,GAAtB;QAAA,iBAeC;QAdC,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gCAAgC,EAAE;YACtE;gBACE,OAAO,EAAE,8BAA8B;gBACrC,QAAQ,EAAE;oBACR,cAAc,EAAE,IAAI,CAAC,YAAY;iBAClC;aACJ;SACF,CAAC,CAAC;QAEH,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,UAAC,MAAyB;YAClD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;gBAC7B,KAAI,CAAC,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YACzC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IA2DH,kCAAC;AAAD,CAtHA,AAsHC;;AA1DM,sCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,uBAAuB;gBACjC,QAAQ,EAAE,uyCAgDX;aACA,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,0CAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,eAAe,GAAG;CACxB,EAF6F,CAE7F,CAAC","file":"list-filters-demo.component.js","sourceRoot":"","sourcesContent":["import { Component } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\nimport {\n  SkyModalService,\n  SkyModalCloseArgs,\n  ListFilterModel\n} from '../../core';\n\nimport { SkyListFiltersModalDemoComponent } from './list-filters-demo-modal.component';\nimport { SkyListFiltersModalDemoContext } from './list-filters-demo-modal-context';\n\n\nexport class SkyListFiltersDemoComponent {\n  public listFilters: ListFilterModel[] = [];\n  public modalFilters: ListFilterModel[] = [];\n\n  public items: Observable<any> = Observable.of([\n    {\n      id: 0,\n      name: 'Orange',\n      description: 'A round, orange fruit.',\n      type: 'citrus',\n      color: 'orange'\n    },\n    {\n      id: 1,\n      name: 'Mango',\n      description: 'Delicious in smoothies, but don\\'t eat the skin.',\n      type: 'other',\n      color: 'orange'\n    },\n    {\n      id: 2,\n      name: 'Lime',\n      description: 'A sour, green fruit used in many drinks.',\n      type: 'citrus',\n      color: 'green'\n    },\n    {\n      id: 3,\n      name: 'Strawberry',\n      description: 'A red fruit that goes well with shortcake.',\n      type: 'berry',\n      color: 'red'\n    },\n    {\n      id: 4,\n      name: 'Blueberry',\n      description: 'A small, blue fruit often found in muffins.',\n      type: 'berry',\n      color: 'blue'\n    }\n  ]);\n\n  constructor(private modalService: SkyModalService) {}\n\n  public openFilterModal() {\n    let instance = this.modalService.open(SkyListFiltersModalDemoComponent, [\n      {\n        provide: SkyListFiltersModalDemoContext,\n          useValue: {\n            appliedFilters: this.modalFilters\n          }\n      }\n    ]);\n\n    instance.closed.subscribe((result: SkyModalCloseArgs) => {\n      if (result.reason === 'save') {\n        this.listFilters = result.data.slice();\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sky-list-filters-demo',\n  template: `<sky-list\n  [data]=\"items\"\n  [defaultView]=\"grid\"\n  [appliedFilters]=\"listFilters\"\n  (appliedFiltersChange)=\"modalFilters = $event\">\n  <sky-list-toolbar>\n    <sky-list-secondary-actions>\n      <sky-list-secondary-action>\n        <button type=\"button\">\n          Option\n        </button>\n      </sky-list-secondary-action>\n    </sky-list-secondary-actions>\n    <sky-list-toolbar-sort\n      label=\"Fruit name (A - Z)\"\n      field=\"name\"\n      [descending]=\"false\"\n      type=\"string\"\n    >\n    </sky-list-toolbar-sort>\n    <sky-list-toolbar-sort\n      label=\"Fruit name (Z - A)\"\n      field=\"name\"\n      [descending]=\"true\"\n      type=\"string\"\n    >\n    </sky-list-toolbar-sort>\n    <sky-list-filter-button>\n      <sky-filter-button\n        (filterButtonClick)=\"openFilterModal()\">\n      </sky-filter-button>\n    </sky-list-filter-button>\n    <sky-list-filter-summary\n      (summaryItemClick)=\"openFilterModal()\">\n    </sky-list-filter-summary>\n  </sky-list-toolbar>\n\n  <sky-list-view-grid fit=\"scroll\" #grid>\n    <sky-grid-column\n      field=\"name\"\n      heading=\"Name\">\n    </sky-grid-column>\n    <sky-grid-column\n      field=\"description\"\n      heading=\"Description\">\n    </sky-grid-column>\n  </sky-list-view-grid>\n </sky-list>\n`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SkyModalService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}