{"version":3,"sources":["../../../.srctemp/demos/list-toolbar/list-toolbar-demo.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAU,MAAO,eAAA,CAAgB;AAC1C,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAC7C,OAAO,wBAAA,CAAyB;AAGhC;IAAA;QACS,UAAK,GAAG,UAAU,CAAC,EAAE,CAAC;YAC3B,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,kBAAkB,EAAE;YACxE,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,kBAAkB,EAAE;YACzE,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,kBAAkB,EAAE;YACvE,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,oBAAoB,EAAE;YAC1E,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,oBAAoB,EAAE;YAC3E,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,mBAAmB,EAAE;YACzE,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE,yBAAyB,EAAE;SACrF,CAAC,CAAC;IA8CL,CAAC;IAAD,kCAAC;AAAD,CAvDA,AAuDC;;AA7CM,sCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,uBAAuB;gBACjC,QAAQ,EAAE,y8BAoCX;aACA,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,0CAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"list-toolbar-demo.component.js","sourceRoot":"","sourcesContent":["import { Component } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\n\n\nexport class SkyListToolbarDemoComponent {\n  public items = Observable.of([\n    { id: '1', column1: 101, column2: 'Apple', column3: 'Anne eats apples' },\n    { id: '2', column1: 202, column2: 'Banana', column3: 'Ben eats bananas' },\n    { id: '3', column1: 303, column2: 'Pear', column3: 'Patty eats pears' },\n    { id: '4', column1: 404, column2: 'Grape', column3: 'George eats grapes' },\n    { id: '5', column1: 505, column2: 'Banana', column3: 'Becky eats bananas' },\n    { id: '6', column1: 606, column2: 'Lemon', column3: 'Larry eats lemons' },\n    { id: '7', column1: 707, column2: 'Strawberry', column3: 'Sally eats strawberries' }\n  ]);\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sky-list-toolbar-demo',\n  template: `\n<sky-list [data]=\"items\" [defaultView]=\"grid\">\n  <sky-list-toolbar>\n    <sky-list-secondary-actions>\n      <sky-list-secondary-action>\n        <button type=\"button\">\n          Option\n        </button>\n      </sky-list-secondary-action>\n    </sky-list-secondary-actions>\n    <sky-list-toolbar-sort\n      label=\"Fruit name (A - Z)\"\n      field=\"column2\"\n      [descending]=\"false\"\n      type=\"string\"\n    >\n    </sky-list-toolbar-sort>\n    <sky-list-toolbar-sort\n      label=\"Fruit name (Z - A)\"\n      field=\"column2\"\n      [descending]=\"true\"\n      type=\"string\"\n    >\n    </sky-list-toolbar-sort>\n  </sky-list-toolbar>\n\n  <sky-list-view-grid fit=\"scroll\" #grid>\n    <sky-grid-column\n      field=\"column1\"\n      heading=\"Column1\"\n      [isSortable]=\"false\">\n    </sky-grid-column>\n    <sky-grid-column field=\"column2\" heading=\"Column2\">\n    </sky-grid-column>\n  </sky-list-view-grid>\n </sky-list>\n`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}